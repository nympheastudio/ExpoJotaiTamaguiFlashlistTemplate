{"version":3,"file":"generic.js","sourceRoot":"","sources":["../src/generic.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,yCAA2C;AAE3C,qCAAkF;AAElF,IAAiB,OAAO,CAkCvB;AAlCD,WAAiB,OAAO;IACtB,MAAM,yBAAyB,GAAG,OAAC,CAAC,MAAM,CAAC;QACzC,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;QACjB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC3B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC3B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC3B,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC1B,GAAG,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC;QACzB,QAAQ;QACR,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC1B,QAAQ;QACR,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC9B,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC/B,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KACjC,CAAC,CAAC;IAGU,YAAI,GAAG,OAAC,CAAC,MAAM,CAAC;QAC3B,cAAc,EAAE,6BAAoB;QACpC,iBAAiB,EAAE,OAAC,CAAC,MAAM,CAAC;YAC1B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;SACjB,CAAC;QACF,OAAO,EAAE,OAAC,CAAC,MAAM,CAAC;YAChB,gBAAgB,EAAE,OAAC,CAAC,MAAM,EAAE;YAC5B,kBAAkB,EAAE,OAAC,CAAC,KAAK,CAAC,2BAAkB,CAAC;SAChD,CAAC;QACF,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE;QAC5B,kBAAkB,EAAE,yBAAyB;QAC7C,uEAAuE;QACvE,QAAQ,EAAE,OAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC9B,IAAI,EAAE,OAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC1B,WAAW,EAAE,OAAC,CAAC,OAAO,CAAC,qBAAY,CAAC,qBAAqB,CAAC;QAC1D,WAAW,EAAE,OAAC,CAAC,UAAU,CAAC,oBAAW,CAAC,CAAC,QAAQ,EAAE;KAClD,CAAC,CAAC;AACL,CAAC,EAlCgB,OAAO,uBAAP,OAAO,QAkCvB","sourcesContent":["import { z } from 'zod';\nimport { LoggerLevel } from '@expo/logger';\n\nimport { ArchiveSourceSchemaZ, BuildTrigger, EnvironmentSecretZ } from './common';\n\nexport namespace Generic {\n  const BuilderEnvironmentSchemaZ = z.object({\n    image: z.string(),\n    node: z.string().optional(),\n    yarn: z.string().optional(),\n    pnpm: z.string().optional(),\n    bun: z.string().optional(),\n    env: z.record(z.string()),\n    // Linux\n    ndk: z.string().optional(),\n    // macOS\n    bundler: z.string().optional(),\n    fastlane: z.string().optional(),\n    cocoapods: z.string().optional(),\n  });\n\n  export type Job = z.infer<typeof JobZ>;\n  export const JobZ = z.object({\n    projectArchive: ArchiveSourceSchemaZ,\n    customBuildConfig: z.object({\n      path: z.string(),\n    }),\n    secrets: z.object({\n      robotAccessToken: z.string(),\n      environmentSecrets: z.array(EnvironmentSecretZ),\n    }),\n    expoDevUrl: z.string().url(),\n    builderEnvironment: BuilderEnvironmentSchemaZ,\n    // We use this to discern between Android.Job, Ios.Job and Generic.Job.\n    platform: z.never().optional(),\n    type: z.never().optional(),\n    triggeredBy: z.literal(BuildTrigger.GIT_BASED_INTEGRATION),\n    loggerLevel: z.nativeEnum(LoggerLevel).optional(),\n  });\n}\n"]}