{"version":3,"file":"reactnavigationv4.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnavigationv4.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAEnD,OAAO,EAAE,8BAA8B,EAAE,MAAM,0BAA0B,CAAC;AAE1E,OAAO,EAAE,uBAAuB,EAAE,wBAAwB,EAAE,MAAM,SAAS,CAAC;AAyC5E,MAAM,cAAc,GAA6B;IAC/C,oBAAoB,EAAE,IAAI;CAC3B,CAAC;AAEF;;;GAGG;AACH,MAAM,gCAAiC,SAAQ,8BAA8B;IAkB3E,YAAmB,UAA6C,EAAE;QAChE,KAAK,EAAE,CAAC;QAhBM,SAAI,GAAW,gCAAgC,CAAC,mBAAmB,CAAC;QAE5E,kBAAa,GAAgC,IAAI,CAAC;QAEzC,uBAAkB,GAAW,GAAG,CAAC;QAG1C,qBAAgB,GAAa,EAAE,CAAC;QAGhC,yBAAoB,GAAY,KAAK,CAAC;QA+O9C,sGAAsG;QAC9F,wBAAmB,GAAG,CAAC,GAAW,EAAQ,EAAE;YAClD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEhC,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,EAAE;gBAC1D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC;aAC7G;QACH,CAAC,CAAC;QAEF,6EAA6E;QACrE,gCAA2B,GAAG,CAAC,eAAuB,EAAQ,EAAE;YACtE,MAAM,CAAC,GAAG,CACR,iEAAiE,eAAe,0BAA0B,CAC3G,CAAC;QACJ,CAAC,CAAC;QArPA,IAAI,CAAC,QAAQ,mCACR,cAAc,GACd,OAAO,CACX,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,8BAA8B,CACnC,QAA4B,EAC5B,cAA8B,EAC9B,cAA8B;QAE9B,KAAK,CAAC,8BAA8B,CAAC,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;QAE/E,kHAAkH;QAClH,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAC9B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,CAAC;YACjF,IAAI,IAAI,CAAC,aAAa,EAAE;gBACtB,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBAEhC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;aAClC;iBAAM;gBACL,IAAI,CAAC,mBAAmB,GAAG,UAAU,CACnC,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,EACzC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CACnC,CAAC;aACH;SACF;IACH,CAAC;IAED;;;OAGG;IACH,iHAAiH;IAC1G,oBAAoB,CAAC,eAAoB;QAC9C;;;;WAIG;QACH,IAAI,CAAC,aAAa,CAAC,yBAAyB,EAAE;YAC5C,IAAI,SAAS,IAAI,eAAe,EAAE;gBAChC,sEAAsE;gBACtE,IAAI,CAAC,aAAa,GAAG,eAAe,CAAC,OAAO,CAAC;aAC9C;iBAAM;gBACL,IAAI,CAAC,aAAa,GAAG,eAAe,CAAC;aACtC;YAED,IAAI,IAAI,CAAC,aAAa,EAAE;gBACtB,IAAI,CAAC,YAAY,EAAE,CAAC;gBAEpB,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBAC9B,IAAI,IAAI,CAAC,kBAAkB,EAAE;wBAC3B,IAAI,CAAC,wBAAwB,EAAE,CAAC;qBACjC;yBAAM;wBACL,MAAM,CAAC,GAAG,CACR,sGAAsG,CACvG,CAAC;qBACH;oBACD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;iBAClC;gBAED,aAAa,CAAC,yBAAyB,GAAG,IAAI,CAAC;aAChD;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,wEAAwE,CAAC,CAAC;aACvF;SACF;IACH,CAAC;IAED;;OAEG;IACK,wBAAwB;QAC9B,+EAA+E;QAC/E,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACjD,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC;YAEnD,IAAI,OAAO,IAAI,CAAC,mBAAmB,KAAK,WAAW,EAAE;gBACnD,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACvC,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;aACtC;YAED,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAClC;IACH,CAAC;IAED;;;OAGG;IACK,YAAY;QAClB,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,MAAM,yBAAyB,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAE1F,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAC1E,MAAM,QAAQ,GAAG,yBAAyB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAE1D,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAE9B,OAAO,QAAQ,CAAC;YAClB,CAAC,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACK,cAAc,CAAC,KAAoC,EAAE,0BAAmC,KAAK;;QACnG,uDAAuD;QACvD,gMAAgM;QAChM,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,SAAS,EAAE;YACjC,MAAM,CAAC,IAAI,CAAC,gFAAgF,CAAC,CAAC;YAE9F,OAAO;SACR;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;QAE3D,iGAAiG;QACjG,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,YAAY,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE;YAChE,MAAM,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAEnF,IAAI,aAAa,GAAG,eAAe,CAAC;YACpC,IAAI,uBAAuB,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACtD,aAAa,mCACR,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,GACnC,eAAe,CACnB,CAAC;aACH;YAED,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;YAE9D,IAAI,uBAAuB,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACtD,qEAAqE;gBACrE,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;gBACxD,MAAM,YAAY,GAAG,aAAa,CAAC,IAAI,KAAK,YAAY,CAAC,IAAI,CAAC;gBAC9D,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAC7B,YAAY,CAAC,IAAI,EACjB,YAAY,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,wBAAwB,CAClE,CAAC;aACH;iBAAM;gBACL,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;aAChE;YAED,MAAA,IAAI,CAAC,eAAe,qDAAG,YAAY,CAAC,CAAC;YAErC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;SAChC;IACH,CAAC;IAED,4DAA4D;IACpD,oBAAoB,CAAC,aAAiC;;QAC5D,IAAI,YAAY,GAAG,MAAA,IAAI,CAAC,eAAe,uEAAQ,aAAa,EAAG,CAAC;QAEhE,mEAAmE;QACnE,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,CAAC,KAAK,CACV,8DAA8D,YAAY,2DAA2D,CACtI,CAAC;YAEF,YAAY,mCACP,aAAa,KAChB,OAAO,EAAE,KAAK,GACf,CAAC;SACH;QAED,IAAI,YAAY,CAAC,OAAO,KAAK,KAAK,EAAE;YAClC,IAAI,CAAC,2BAA2B,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACrD;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;OAEG;IACK,sBAAsB,CAC5B,KAAwB,EACxB,aAAiC;QAEjC,MAAM,IAAI,GAA2B;YACnC,KAAK,EAAE;gBACL,IAAI,EAAE,KAAK,CAAC,SAAS;gBACrB,GAAG,EAAE,KAAK,CAAC,GAAG;gBACd,uDAAuD;gBACvD,MAAM,EAAE,EAAE;gBACV,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;aACvD;YACD,aAAa,EAAE,aAAa;gBAC1B,CAAC,CAAC;oBACE,IAAI,EAAE,aAAa,CAAC,SAAS;oBAC7B,GAAG,EAAE,aAAa,CAAC,GAAG;oBACtB,uDAAuD;oBACvD,MAAM,EAAE,EAAE;iBACX;gBACH,CAAC,CAAC,IAAI;SACT,CAAC;QAEF,OAAO;YACL,IAAI,EAAE,KAAK,CAAC,SAAS;YACrB,EAAE,EAAE,YAAY;YAChB,IAAI,EAAE;gBACJ,yBAAyB,EAAE,gCAAgC,CAAC,mBAAmB;gBAC/E,oBAAoB,EAAE,KAAK,CAAC,SAAS;aACtC;YACD,IAAI;SACL,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,yBAAyB,CAAC,KAAwB;QACxD,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE9C,IACE,OAAO,IAAI,WAAW;YACtB,QAAQ,IAAI,WAAW;YACvB,OAAO,WAAW,CAAC,KAAK,KAAK,QAAQ;YACrC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EACjC;YACA,OAAO,IAAI,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC;SACpD;QAED,OAAO,WAAgC,CAAC;IAC1C,CAAC;IAkBD,wEAAwE;IAChE,yBAAyB;QAC/B,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,IAAI,CAAC,kBAAkB,CAAC,OAAO,GAAG,KAAK,CAAC;YACxC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;YACjC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;SACrC;IACH,CAAC;;AAlRa,oDAAmB,GAAW,qBAAqB,CAAC;AAqRpE,MAAM,8BAA8B,GAAuB;IACzD,IAAI,EAAE,YAAY;IAClB,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE;QACJ,yBAAyB,EAAE,gCAAgC,CAAC,mBAAmB;KAChF;IACD,IAAI,EAAE,EAAE;IACR,QAAQ,EAAE;QACR,MAAM,EAAE,MAAM;KACf;CACF,CAAC;AAEF,OAAO,EAAE,gCAAgC,EAAE,8BAA8B,EAAE,CAAC","sourcesContent":["/* eslint-disable max-lines */\nimport type { Transaction, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { RN_GLOBAL_OBJ } from '../utils/worldwide';\nimport type { OnConfirmRoute, TransactionCreator } from './routingInstrumentation';\nimport { InternalRoutingInstrumentation } from './routingInstrumentation';\nimport type { BeforeNavigate, ReactNavigationTransactionContext, RouteChangeContextData } from './types';\nimport { customTransactionSource, defaultTransactionSource } from './utils';\n\nexport interface NavigationRouteV4 {\n  routeName: string;\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  params?: Record<string, any>;\n}\n\nexport interface NavigationStateV4 {\n  index: number;\n  key: string;\n  isTransitioning: boolean;\n  routeName?: string;\n  routes: (NavigationRouteV4 | NavigationStateV4)[];\n}\n\nexport interface AppContainerInstance {\n  _navigation: {\n    state: NavigationStateV4;\n    router: {\n      getStateForAction: (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        action: any,\n        state: NavigationStateV4,\n      ) => NavigationStateV4;\n    };\n  };\n}\n\ninterface ReactNavigationV4Options {\n  /**\n   * How long the instrumentation will wait for the route to mount after a change has been initiated,\n   * before the transaction is discarded.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  routeChangeTimeoutMs: number;\n}\n\nconst defaultOptions: ReactNavigationV4Options = {\n  routeChangeTimeoutMs: 1000,\n};\n\n/**\n * Instrumentation for React-Navigation V4.\n * Register the app container with `registerAppContainer` to use, or see docs for more details.\n */\nclass ReactNavigationV4Instrumentation extends InternalRoutingInstrumentation {\n  public static instrumentationName: string = 'react-navigation-v4';\n\n  public readonly name: string = ReactNavigationV4Instrumentation.instrumentationName;\n\n  private _appContainer: AppContainerInstance | null = null;\n\n  private readonly _maxRecentRouteLen: number = 200;\n\n  private _prevRoute?: NavigationRouteV4;\n  private _recentRouteKeys: string[] = [];\n\n  private _latestTransaction?: Transaction;\n  private _initialStateHandled: boolean = false;\n  private _stateChangeTimeout?: number | undefined;\n\n  private _options: ReactNavigationV4Options;\n\n  public constructor(options: Partial<ReactNavigationV4Options> = {}) {\n    super();\n\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n  }\n\n  /**\n   * Extends by calling _handleInitialState at the end.\n   */\n  public registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate,\n    onConfirmRoute: OnConfirmRoute,\n  ): void {\n    super.registerRoutingInstrumentation(listener, beforeNavigate, onConfirmRoute);\n\n    // Need to handle the initial state as the router patch will only attach transactions on subsequent route changes.\n    if (!this._initialStateHandled) {\n      this._latestTransaction = this.onRouteWillChange(INITIAL_TRANSACTION_CONTEXT_V4);\n      if (this._appContainer) {\n        this._updateLatestTransaction();\n\n        this._initialStateHandled = true;\n      } else {\n        this._stateChangeTimeout = setTimeout(\n          this._discardLatestTransaction.bind(this),\n          this._options.routeChangeTimeoutMs,\n        );\n      }\n    }\n  }\n\n  /**\n   * Pass the ref to the app container to register it to the instrumentation\n   * @param appContainerRef Ref to an `AppContainer`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public registerAppContainer(appContainerRef: any): void {\n    /* We prevent duplicate routing instrumentation to be initialized on fast refreshes\n\n      Explanation: If the user triggers a fast refresh on the file that the instrumentation is\n      initialized in, it will initialize a new instance and will cause undefined behavior.\n     */\n    if (!RN_GLOBAL_OBJ.__sentry_rn_v4_registered) {\n      if ('current' in appContainerRef) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        this._appContainer = appContainerRef.current;\n      } else {\n        this._appContainer = appContainerRef;\n      }\n\n      if (this._appContainer) {\n        this._patchRouter();\n\n        if (!this._initialStateHandled) {\n          if (this._latestTransaction) {\n            this._updateLatestTransaction();\n          } else {\n            logger.log(\n              '[ReactNavigationV4Instrumentation] App container registered, but integration has not been setup yet.',\n            );\n          }\n          this._initialStateHandled = true;\n        }\n\n        RN_GLOBAL_OBJ.__sentry_rn_v4_registered = true;\n      } else {\n        logger.warn('[ReactNavigationV4Instrumentation] Received invalid app container ref!');\n      }\n    }\n  }\n\n  /**\n   * Updates the latest transaction with the current state and calls beforeNavigate.\n   */\n  private _updateLatestTransaction(): void {\n    // We can assume the ref is present as this is called from registerAppContainer\n    if (this._appContainer && this._latestTransaction) {\n      const state = this._appContainer._navigation.state;\n\n      if (typeof this._stateChangeTimeout !== 'undefined') {\n        clearTimeout(this._stateChangeTimeout);\n        this._stateChangeTimeout = undefined;\n      }\n\n      this._onStateChange(state, true);\n    }\n  }\n\n  /**\n   * Patches the react navigation router so we can listen to the route changes and attach the `IdleTransaction` before the\n   * new screen is mounted.\n   */\n  private _patchRouter(): void {\n    if (this._appContainer) {\n      const originalGetStateForAction = this._appContainer._navigation.router.getStateForAction;\n\n      this._appContainer._navigation.router.getStateForAction = (action, state) => {\n        const newState = originalGetStateForAction(action, state);\n\n        this._onStateChange(newState);\n\n        return newState;\n      };\n    }\n  }\n\n  /**\n   * To be called on navigation state changes and creates the transaction.\n   */\n  private _onStateChange(state: NavigationStateV4 | undefined, updateLatestTransaction: boolean = false): void {\n    // it's not guaranteed that a state is always produced.\n    // see: https://github.com/react-navigation/react-navigation/blob/45d419be93c34e900e8734ce98321ae875ac4997/packages/core/src/routers/SwitchRouter.js?rgh-link-date=2021-09-25T12%3A43%3A36Z#L301\n    if (!state || state === undefined) {\n      logger.warn('[ReactNavigationV4Instrumentation] onStateChange called without a valid state.');\n\n      return;\n    }\n\n    const currentRoute = this._getCurrentRouteFromState(state);\n\n    // If the route is a different key, this is so we ignore actions that pertain to the same screen.\n    if (!this._prevRoute || currentRoute.key !== this._prevRoute.key) {\n      const originalContext = this._getTransactionContext(currentRoute, this._prevRoute);\n\n      let mergedContext = originalContext;\n      if (updateLatestTransaction && this._latestTransaction) {\n        mergedContext = {\n          ...this._latestTransaction.toContext(),\n          ...originalContext,\n        };\n      }\n\n      const finalContext = this._prepareFinalContext(mergedContext);\n\n      if (updateLatestTransaction && this._latestTransaction) {\n        // Update the latest transaction instead of calling onRouteWillChange\n        this._latestTransaction.updateWithContext(finalContext);\n        const isCustomName = mergedContext.name !== finalContext.name;\n        this._latestTransaction.setName(\n          finalContext.name,\n          isCustomName ? customTransactionSource : defaultTransactionSource,\n        );\n      } else {\n        this._latestTransaction = this.onRouteWillChange(finalContext);\n      }\n\n      this._onConfirmRoute?.(finalContext);\n\n      this._pushRecentRouteKey(currentRoute.key);\n      this._prevRoute = currentRoute;\n    }\n  }\n\n  /** Creates final transaction context before confirmation */\n  private _prepareFinalContext(mergedContext: TransactionContext): TransactionContext {\n    let finalContext = this._beforeNavigate?.({ ...mergedContext });\n\n    // This block is to catch users not returning a transaction context\n    if (!finalContext) {\n      logger.error(\n        `[ReactNavigationV4Instrumentation] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`,\n      );\n\n      finalContext = {\n        ...mergedContext,\n        sampled: false,\n      };\n    }\n\n    if (finalContext.sampled === false) {\n      this._onBeforeNavigateNotSampled(finalContext.name);\n    }\n\n    return finalContext;\n  }\n\n  /**\n   * Gets the transaction context for a `NavigationRouteV4`\n   */\n  private _getTransactionContext(\n    route: NavigationRouteV4,\n    previousRoute?: NavigationRouteV4,\n  ): ReactNavigationTransactionContext {\n    const data: RouteChangeContextData = {\n      route: {\n        name: route.routeName, // Include name here too for use in `beforeNavigate`\n        key: route.key,\n        // TODO: filter PII params instead of dropping them all\n        params: {},\n        hasBeenSeen: this._recentRouteKeys.includes(route.key),\n      },\n      previousRoute: previousRoute\n        ? {\n            name: previousRoute.routeName,\n            key: previousRoute.key,\n            // TODO: filter PII params instead of dropping them all\n            params: {},\n          }\n        : null,\n    };\n\n    return {\n      name: route.routeName,\n      op: 'navigation',\n      tags: {\n        'routing.instrumentation': ReactNavigationV4Instrumentation.instrumentationName,\n        'routing.route.name': route.routeName,\n      },\n      data,\n    };\n  }\n\n  /**\n   * Gets the current route given a navigation state\n   */\n  private _getCurrentRouteFromState(state: NavigationStateV4): NavigationRouteV4 {\n    const parentRoute = state.routes[state.index];\n\n    if (\n      'index' in parentRoute &&\n      'routes' in parentRoute &&\n      typeof parentRoute.index === 'number' &&\n      Array.isArray(parentRoute.routes)\n    ) {\n      return this._getCurrentRouteFromState(parentRoute);\n    }\n\n    return parentRoute as NavigationRouteV4;\n  }\n\n  /** Pushes a recent route key, and removes earlier routes when there is greater than the max length */\n  private _pushRecentRouteKey = (key: string): void => {\n    this._recentRouteKeys.push(key);\n\n    if (this._recentRouteKeys.length > this._maxRecentRouteLen) {\n      this._recentRouteKeys = this._recentRouteKeys.slice(this._recentRouteKeys.length - this._maxRecentRouteLen);\n    }\n  };\n\n  /** Helper to log a transaction that was not sampled due to beforeNavigate */\n  private _onBeforeNavigateNotSampled = (transactionName: string): void => {\n    logger.log(\n      `[ReactNavigationV4Instrumentation] Will not send transaction \"${transactionName}\" due to beforeNavigate.`,\n    );\n  };\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _discardLatestTransaction(): void {\n    if (this._latestTransaction) {\n      this._latestTransaction.sampled = false;\n      this._latestTransaction.finish();\n      this._latestTransaction = undefined;\n    }\n  }\n}\n\nconst INITIAL_TRANSACTION_CONTEXT_V4: TransactionContext = {\n  name: 'App Launch',\n  op: 'navigation',\n  tags: {\n    'routing.instrumentation': ReactNavigationV4Instrumentation.instrumentationName,\n  },\n  data: {},\n  metadata: {\n    source: 'view',\n  },\n};\n\nexport { ReactNavigationV4Instrumentation, INITIAL_TRANSACTION_CONTEXT_V4 };\n"]}