import { BuildFunction } from './BuildFunction.js';
import { BuildStepGlobalContext } from './BuildStepContext.js';
import { BuildWorkflow } from './BuildWorkflow.js';
import { BuildFunctionGroup } from './BuildFunctionGroup.js';
export declare class BuildConfigParser {
    private readonly ctx;
    private readonly configPath;
    private readonly externalFunctions?;
    private readonly externalFunctionGroups?;
    constructor(ctx: BuildStepGlobalContext, { configPath, externalFunctions, externalFunctionGroups, }: {
        configPath: string;
        externalFunctions?: BuildFunction[];
        externalFunctionGroups?: BuildFunctionGroup[];
    });
    parseAsync(): Promise<BuildWorkflow>;
    private createBuildStepFromConfig;
    private createBuildStepFromBuildStepCommandRun;
    private createBuildStepFromBuildStepBareCommandRun;
    private createBuildStepsFromBuildStepFunctionGroupCall;
    private createBuildStepsFromBuildStepBareFunctionGroupCall;
    private createBuildStepFromBuildStepBareFunctionCall;
    private createBuildStepsFromBareBuildStepFunctionOrBareBuildStepFunctionGroupCall;
    private createBuildStepsFromBuildStepFunctionOrBuildStepFunctionGroupCall;
    private createBuildStepFromBuildStepFunctionCall;
    private createBuildFunctionsFromConfig;
    private createBuildFunctionFromConfig;
    private createBuildStepInputsFromDefinition;
    private createBuildStepInputProvidersFromBuildFunctionInputs;
    private createBuildStepOutputsFromDefinition;
    private createBuildStepOutputProvidersFromBuildFunctionOutputs;
    private mergeBuildFunctionsWithExternal;
    private validateExternalFunctions;
    private validateExternalFunctionGroups;
    private getExternalFunctionFullIds;
    private getExternalFunctionGroupFullIds;
}
