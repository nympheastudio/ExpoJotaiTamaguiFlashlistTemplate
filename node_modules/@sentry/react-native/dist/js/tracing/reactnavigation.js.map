{"version":3,"file":"reactnavigation.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnavigation.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { getActiveSpan, setMeasurement, spanToJSON, startInactiveSpan } from '@sentry/core';\nimport type { Span, Transaction as TransactionType, TransactionContext } from '@sentry/types';\nimport { logger, timestampInSeconds } from '@sentry/utils';\n\nimport type { NewFrameEvent } from '../utils/sentryeventemitter';\nimport { type SentryEventEmitter, createSentryEventEmitter, NewFrameEventName } from '../utils/sentryeventemitter';\nimport { RN_GLOBAL_OBJ } from '../utils/worldwide';\nimport { NATIVE } from '../wrapper';\nimport type { OnConfirmRoute, TransactionCreator } from './routingInstrumentation';\nimport { InternalRoutingInstrumentation } from './routingInstrumentation';\nimport { manualInitialDisplaySpans, startTimeToInitialDisplaySpan } from './timetodisplay';\nimport type { BeforeNavigate, ReactNavigationTransactionContext, RouteChangeContextData } from './types';\nimport { customTransactionSource, defaultTransactionSource, getBlankTransactionContext } from './utils';\n\nexport interface NavigationRoute {\n  name: string;\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  params?: Record<string, any>;\n}\n\ninterface NavigationContainer {\n  addListener: (type: string, listener: () => void) => void;\n  getCurrentRoute: () => NavigationRoute;\n}\n\ninterface ReactNavigationOptions {\n  /**\n   * How long the instrumentation will wait for the route to mount after a change has been initiated,\n   * before the transaction is discarded.\n   * Time is in ms.\n   *\n   * @default 1000\n   */\n  routeChangeTimeoutMs: number;\n\n  /**\n   * Time to initial display measures the time it takes from\n   * navigation dispatch to the render of the first frame of the new screen.\n   *\n   * @default false\n   */\n  enableTimeToInitialDisplay: boolean;\n}\n\nconst defaultOptions: ReactNavigationOptions = {\n  routeChangeTimeoutMs: 1000,\n  enableTimeToInitialDisplay: false,\n};\n\n/**\n * Instrumentation for React-Navigation V5 and above. See docs or sample app for usage.\n *\n * How this works:\n * - `_onDispatch` is called every time a dispatch happens and sets an IdleTransaction on the scope without any route context.\n * - `_onStateChange` is then called AFTER the state change happens due to a dispatch and sets the route context onto the active transaction.\n * - If `_onStateChange` isn't called within `STATE_CHANGE_TIMEOUT_DURATION` of the dispatch, then the transaction is not sampled and finished.\n */\nexport class ReactNavigationInstrumentation extends InternalRoutingInstrumentation {\n  public static instrumentationName: string = 'react-navigation-v5';\n\n  public readonly name: string = ReactNavigationInstrumentation.instrumentationName;\n\n  private _navigationContainer: NavigationContainer | null = null;\n  private _newScreenFrameEventEmitter: SentryEventEmitter | null = null;\n\n  private readonly _maxRecentRouteLen: number = 200;\n\n  private _latestRoute?: NavigationRoute;\n  private _latestTransaction?: TransactionType;\n  private _navigationProcessingSpan?: Span;\n\n  private _initialStateHandled: boolean = false;\n  private _stateChangeTimeout?: number | undefined;\n  private _recentRouteKeys: string[] = [];\n\n  private _options: ReactNavigationOptions;\n\n  public constructor(options: Partial<ReactNavigationOptions> = {}) {\n    super();\n\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    if (this._options.enableTimeToInitialDisplay) {\n      this._newScreenFrameEventEmitter = createSentryEventEmitter();\n      this._newScreenFrameEventEmitter.initAsync(NewFrameEventName);\n      NATIVE.initNativeReactNavigationNewFrameTracking().catch((reason: unknown) => {\n        logger.error(`[ReactNavigationInstrumentation] Failed to initialize native new frame tracking: ${reason}`);\n      });\n    }\n  }\n\n  /**\n   * Extends by calling _handleInitialState at the end.\n   */\n  public registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate,\n    onConfirmRoute: OnConfirmRoute,\n  ): void {\n    super.registerRoutingInstrumentation(listener, beforeNavigate, onConfirmRoute);\n\n    // We create an initial state here to ensure a transaction gets created before the first route mounts.\n    if (!this._initialStateHandled) {\n      this._onDispatch();\n      if (this._navigationContainer) {\n        // Navigation container already registered, just populate with route state\n        this._onStateChange();\n\n        this._initialStateHandled = true;\n      }\n    }\n  }\n\n  /**\n   * Pass the ref to the navigation container to register it to the instrumentation\n   * @param navigationContainerRef Ref to a `NavigationContainer`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public registerNavigationContainer(navigationContainerRef: any): void {\n    /* We prevent duplicate routing instrumentation to be initialized on fast refreshes\n\n      Explanation: If the user triggers a fast refresh on the file that the instrumentation is\n      initialized in, it will initialize a new instance and will cause undefined behavior.\n     */\n    if (!RN_GLOBAL_OBJ.__sentry_rn_v5_registered) {\n      if ('current' in navigationContainerRef) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        this._navigationContainer = navigationContainerRef.current;\n      } else {\n        this._navigationContainer = navigationContainerRef;\n      }\n\n      if (this._navigationContainer) {\n        this._navigationContainer.addListener(\n          '__unsafe_action__', // This action is emitted on every dispatch\n          this._onDispatch.bind(this),\n        );\n        this._navigationContainer.addListener(\n          'state', // This action is emitted on every state change\n          this._onStateChange.bind(this),\n        );\n\n        if (!this._initialStateHandled) {\n          if (this._latestTransaction) {\n            // If registerRoutingInstrumentation was called first _onDispatch has already been called\n            this._onStateChange();\n\n            this._initialStateHandled = true;\n          } else {\n            logger.log(\n              '[ReactNavigationInstrumentation] Navigation container registered, but integration has not been setup yet.',\n            );\n          }\n        }\n\n        RN_GLOBAL_OBJ.__sentry_rn_v5_registered = true;\n      } else {\n        logger.warn('[ReactNavigationInstrumentation] Received invalid navigation container ref!');\n      }\n    } else {\n      logger.log(\n        '[ReactNavigationInstrumentation] Instrumentation already exists, but register has been called again, doing nothing.',\n      );\n    }\n  }\n\n  /**\n   * To be called on every React-Navigation action dispatch.\n   * It does not name the transaction or populate it with route information. Instead, it waits for the state to fully change\n   * and gets the route information from there, @see _onStateChange\n   */\n  private _onDispatch(): void {\n    if (this._latestTransaction) {\n      logger.log(\n        '[ReactNavigationInstrumentation] A transaction was detected that turned out to be a noop, discarding.',\n      );\n      this._discardLatestTransaction();\n      this._clearStateChangeTimeout();\n    }\n\n    this._latestTransaction = this.onRouteWillChange(\n      getBlankTransactionContext(ReactNavigationInstrumentation.instrumentationName),\n    );\n\n    if (this._options.enableTimeToInitialDisplay) {\n      this._navigationProcessingSpan = startInactiveSpan({\n        op: 'navigation.processing',\n        name: 'Navigation processing',\n        startTimestamp: this._latestTransaction?.startTimestamp,\n      });\n    }\n\n    this._stateChangeTimeout = setTimeout(\n      this._discardLatestTransaction.bind(this),\n      this._options.routeChangeTimeoutMs,\n    );\n  }\n\n  /**\n   * To be called AFTER the state has been changed to populate the transaction with the current route.\n   */\n  private _onStateChange(): void {\n    const stateChangedTimestamp = timestampInSeconds();\n\n    // Use the getCurrentRoute method to be accurate.\n    const previousRoute = this._latestRoute;\n\n    if (!this._navigationContainer) {\n      logger.warn(\n        '[ReactNavigationInstrumentation] Missing navigation container ref. Route transactions will not be sent.',\n      );\n\n      return;\n    }\n\n    const route = this._navigationContainer.getCurrentRoute();\n\n    if (route) {\n      if (this._latestTransaction) {\n        if (!previousRoute || previousRoute.key !== route.key) {\n          const routeHasBeenSeen = this._recentRouteKeys.includes(route.key);\n          const latestTtidSpan =\n            !routeHasBeenSeen &&\n            this._options.enableTimeToInitialDisplay &&\n            startTimeToInitialDisplaySpan({\n              name: `${route.name} initial display`,\n              isAutoInstrumented: true,\n            });\n\n          !routeHasBeenSeen &&\n            this._newScreenFrameEventEmitter?.once(\n              NewFrameEventName,\n              ({ newFrameTimestampInSeconds }: NewFrameEvent) => {\n                const activeSpan = getActiveSpan();\n                if (!activeSpan) {\n                  logger.warn(\n                    '[ReactNavigationInstrumentation] No active span found to attach ui.load.initial_display to.',\n                  );\n                  return;\n                }\n\n                if (manualInitialDisplaySpans.has(activeSpan)) {\n                  logger.warn(\n                    '[ReactNavigationInstrumentation] Detected manual instrumentation for the current active span.',\n                  );\n                  return;\n                }\n\n                if (!latestTtidSpan) {\n                  return;\n                }\n\n                if (spanToJSON(latestTtidSpan).parent_span_id !== getActiveSpan()?.spanContext().spanId) {\n                  logger.warn(\n                    '[ReactNavigationInstrumentation] Currently Active Span changed before the new frame was rendered, _latestTtidSpan is not a child of the currently active span.',\n                  );\n                  return;\n                }\n\n                latestTtidSpan.setStatus('ok');\n                latestTtidSpan.end(newFrameTimestampInSeconds);\n                const ttidSpan = spanToJSON(latestTtidSpan);\n\n                const ttidSpanEnd = ttidSpan.timestamp;\n                const ttidSpanStart = ttidSpan.start_timestamp;\n                if (!ttidSpanEnd || !ttidSpanStart) {\n                  return;\n                }\n\n                setMeasurement('time_to_initial_display', (ttidSpanEnd - ttidSpanStart) * 1000, 'millisecond');\n              },\n            );\n\n          this._navigationProcessingSpan?.updateName(`Processing navigation to ${route.name}`);\n          this._navigationProcessingSpan?.setStatus('ok');\n          this._navigationProcessingSpan?.end(stateChangedTimestamp);\n          this._navigationProcessingSpan = undefined;\n\n          const originalContext = this._latestTransaction.toContext() as typeof BLANK_TRANSACTION_CONTEXT;\n\n          const data: RouteChangeContextData = {\n            ...originalContext.data,\n            route: {\n              name: route.name,\n              key: route.key,\n              // TODO: filter PII params instead of dropping them all\n              params: {},\n              hasBeenSeen: routeHasBeenSeen,\n            },\n            previousRoute: previousRoute\n              ? {\n                  name: previousRoute.name,\n                  key: previousRoute.key,\n                  // TODO: filter PII params instead of dropping them all\n                  params: {},\n                }\n              : null,\n          };\n\n          const updatedContext: ReactNavigationTransactionContext = {\n            ...originalContext,\n            name: route.name,\n            tags: {\n              ...originalContext.tags,\n              'routing.route.name': route.name,\n            },\n            data,\n          };\n\n          const finalContext = this._prepareFinalContext(updatedContext);\n          this._latestTransaction.updateWithContext(finalContext);\n\n          const isCustomName = updatedContext.name !== finalContext.name;\n          this._latestTransaction.setName(\n            finalContext.name,\n            isCustomName ? customTransactionSource : defaultTransactionSource,\n          );\n\n          this._onConfirmRoute?.(finalContext);\n        }\n\n        this._pushRecentRouteKey(route.key);\n        this._latestRoute = route;\n\n        // Clear the latest transaction as it has been handled.\n        this._latestTransaction = undefined;\n      }\n    }\n  }\n\n  /** Creates final transaction context before confirmation */\n  private _prepareFinalContext(updatedContext: TransactionContext): TransactionContext {\n    let finalContext = this._beforeNavigate?.({ ...updatedContext });\n\n    // This block is to catch users not returning a transaction context\n    if (!finalContext) {\n      logger.error(\n        `[ReactNavigationInstrumentation] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`,\n      );\n\n      finalContext = {\n        ...updatedContext,\n        sampled: false,\n      };\n    }\n\n    // Note: finalContext.sampled will be false at this point only if the user sets it to be so in beforeNavigate.\n    if (finalContext.sampled === false) {\n      logger.log(\n        `[ReactNavigationInstrumentation] Will not send transaction \"${finalContext.name}\" due to beforeNavigate.`,\n      );\n    } else {\n      // Clear the timeout so the transaction does not get cancelled.\n      this._clearStateChangeTimeout();\n    }\n\n    return finalContext;\n  }\n\n  /** Pushes a recent route key, and removes earlier routes when there is greater than the max length */\n  private _pushRecentRouteKey = (key: string): void => {\n    this._recentRouteKeys.push(key);\n\n    if (this._recentRouteKeys.length > this._maxRecentRouteLen) {\n      this._recentRouteKeys = this._recentRouteKeys.slice(this._recentRouteKeys.length - this._maxRecentRouteLen);\n    }\n  };\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _discardLatestTransaction(): void {\n    if (this._latestTransaction) {\n      this._latestTransaction.sampled = false;\n      this._latestTransaction.finish();\n      this._latestTransaction = undefined;\n    }\n    if (this._navigationProcessingSpan) {\n      this._navigationProcessingSpan = undefined;\n    }\n  }\n\n  /**\n   *\n   */\n  private _clearStateChangeTimeout(): void {\n    if (typeof this._stateChangeTimeout !== 'undefined') {\n      clearTimeout(this._stateChangeTimeout);\n      this._stateChangeTimeout = undefined;\n    }\n  }\n}\n\n/**\n * Backwards compatibility alias for ReactNavigationInstrumentation\n * @deprecated Use ReactNavigationInstrumentation\n */\nexport const ReactNavigationV5Instrumentation = ReactNavigationInstrumentation;\n\nexport const BLANK_TRANSACTION_CONTEXT = {\n  name: 'Route Change',\n  op: 'navigation',\n  tags: {\n    'routing.instrumentation': ReactNavigationInstrumentation.instrumentationName,\n  },\n  data: {},\n};\n"]}