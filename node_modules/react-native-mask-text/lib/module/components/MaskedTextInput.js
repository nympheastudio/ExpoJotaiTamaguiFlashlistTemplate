function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useEffect, useState, forwardRef } from 'react';
import { TextInput } from 'react-native';
import { mask, unMask } from '../utils/mask';
export const MaskedTextInputComponent = (_ref, ref) => {
  let {
    mask: pattern = '',
    type = 'custom',
    options = {},
    defaultValue,
    onChangeText,
    inputAccessoryView,
    ...rest
  } = _ref;
  const defaultValueCustom = defaultValue || '';
  const defaultValueCurrency = defaultValue || '0';
  const initialMaskedValue = type === 'currency' ? mask(defaultValueCurrency, pattern, type, options) : mask(defaultValueCustom, pattern, type, options);
  const initialUnMaskedValue = type === 'currency' ? unMask(defaultValueCurrency, type) : unMask(defaultValueCustom, type);
  const [maskedValue, setMaskedValue] = useState(initialMaskedValue);
  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue);

  function onChange(value) {
    const newUnMaskedValue = unMask(value, type);
    const newMaskedValue = mask(newUnMaskedValue, pattern, type, options);
    setMaskedValue(newMaskedValue);
    setUnmaskedValue(newUnMaskedValue);
  }

  useEffect(() => {
    onChangeText(maskedValue, unMaskedValue);
  }, [maskedValue, unMaskedValue]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, _extends({
    onChangeText: value => onChange(value),
    ref: ref
  }, rest, {
    value: maskedValue
  })), inputAccessoryView);
};
export const MaskedTextInput = /*#__PURE__*/forwardRef(MaskedTextInputComponent);
//# sourceMappingURL=MaskedTextInput.js.map