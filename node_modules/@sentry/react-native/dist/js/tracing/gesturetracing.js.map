{"version":3,"file":"gesturetracing.js","sourceRoot":"","sources":["../../../src/js/tracing/gesturetracing.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport type { Breadcrumb, Hub } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { UI_ACTION } from './ops';\nimport { ReactNativeTracing } from './reactnativetracing';\n\nexport const DEFAULT_BREADCRUMB_CATEGORY = 'gesture';\nexport const DEFAULT_BREADCRUMB_TYPE = 'user';\n\nexport const GESTURE_POSTFIX_LENGTH = 'GestureHandler'.length;\nexport const ACTION_GESTURE_FALLBACK = 'gesture';\n\n/**\n * Internal interface following RNGH 2 Gesture Event API.\n * We need to use this to avoid importing RNGH 2 types and depending on it.\n * https://github.com/software-mansion/react-native-gesture-handler/blob/f0868f7ccf678c947ef65519ebf97ae149a10289/src/handlers/gestures/gesture.ts#L55\n * @hidden\n */\ntype GestureEvent = Record<string, unknown>;\n\n/**\n * Internal interface for RNGH 2 Gesture API.\n * We need to use this to avoid importing RNGH 2 types and depending on it.\n * https://github.com/software-mansion/react-native-gesture-handler/blob/2.9.0/src/handlers/gestures/gesture.ts#L120\n * @hidden\n */\ninterface BaseGesture {\n  handlers?: {\n    onBegin?: (event: GestureEvent) => void;\n    onEnd?: (event: GestureEvent) => void;\n  };\n  handlerName: string;\n}\n\ninterface GestureTracingOptions {\n  getCurrentHub: () => Hub;\n}\n\n/**\n * Patches React Native Gesture Handler v2 Gesture to start a transaction on gesture begin with the appropriate label.\n * Example: ShoppingCartScreen.dismissGesture\n */\nexport function sentryTraceGesture<GestureT>(\n  /**\n   * Label of the gesture to be used in transaction name.\n   * Example: dismissGesture\n   */\n  label: string,\n  gesture: GestureT,\n  options: Partial<GestureTracingOptions> = {},\n): GestureT {\n  const gestureCandidate = gesture as unknown as BaseGesture | undefined | null;\n  if (!gestureCandidate) {\n    logger.warn('[GestureTracing] Gesture can not be undefined');\n    return gesture;\n  }\n  if (!gestureCandidate.handlers) {\n    logger.warn(\n      '[GestureTracing] Can not wrap gesture without handlers. If you want to wrap a gesture composition wrap individual gestures.',\n    );\n    return gesture;\n  }\n  if (!label) {\n    logger.warn('[GestureTracing] Can not wrap gesture without name.');\n    return gesture;\n  }\n  const hub = options.getCurrentHub?.() || getCurrentHub();\n\n  const name =\n    gestureCandidate.handlerName.length > GESTURE_POSTFIX_LENGTH\n      ? gestureCandidate.handlerName\n          .substring(0, gestureCandidate.handlerName.length - GESTURE_POSTFIX_LENGTH)\n          .toLowerCase()\n      : ACTION_GESTURE_FALLBACK;\n\n  const originalOnBegin = gestureCandidate.handlers.onBegin;\n  (gesture as unknown as Required<BaseGesture>).handlers.onBegin = (event: GestureEvent) => {\n    hub\n      .getClient()\n      ?.getIntegration(ReactNativeTracing)\n      ?.startUserInteractionTransaction({ elementId: label, op: `${UI_ACTION}.${name}` });\n\n    addGestureBreadcrumb(`Gesture ${label} begin.`, { event, hub, name });\n\n    if (originalOnBegin) {\n      originalOnBegin(event);\n    }\n  };\n\n  const originalOnEnd = gestureCandidate.handlers.onEnd;\n  (gesture as unknown as Required<BaseGesture>).handlers.onEnd = (event: GestureEvent) => {\n    addGestureBreadcrumb(`Gesture ${label} end.`, { event, hub, name });\n\n    if (originalOnEnd) {\n      originalOnEnd(event);\n    }\n  };\n\n  return gesture;\n}\n\nfunction addGestureBreadcrumb(\n  message: string,\n  options: {\n    event: Record<string, unknown> | undefined | null;\n    hub: Hub;\n    name: string;\n  },\n): void {\n  const { event, hub, name } = options;\n  const crumb: Breadcrumb = {\n    message,\n    level: 'info',\n    type: DEFAULT_BREADCRUMB_TYPE,\n    category: DEFAULT_BREADCRUMB_CATEGORY,\n  };\n\n  if (event) {\n    const data: Record<string, unknown> = {\n      gesture: name,\n    };\n    for (const key of Object.keys(GestureEventKeys)) {\n      const eventKey = GestureEventKeys[key as keyof typeof GestureEventKeys];\n      if (eventKey in event) {\n        data[eventKey] = event[eventKey];\n      }\n    }\n    crumb.data = data;\n  }\n\n  hub.addBreadcrumb(crumb);\n\n  logger.log(`[GestureTracing] ${crumb.message}`);\n}\n\n/**\n * Selected keys from RNGH 2 Gesture Event API.\n * We only want to send relevant data to save on payload size.\n * @hidden\n */\nconst GestureEventKeys = {\n  NUMBER_OF_POINTERS: 'numberOfPointers',\n  NUMBER_OF_TOUCHES: 'numberOfTouches',\n  FORCE: 'force',\n  FORCE_CHANGE: 'forceChange',\n  ROTATION: 'rotation',\n  ROTATION_CHANGE: 'rotationChange',\n  SCALE: 'scale',\n  SCALE_CHANGE: 'scaleChange',\n  DURATION: 'duration',\n  VELOCITY: 'velocity',\n  VELOCITY_X: 'velocityX',\n  VELOCITY_Y: 'velocityY',\n} as const;\n"]}