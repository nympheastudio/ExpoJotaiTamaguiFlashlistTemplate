import { __awaiter } from "tslib";
import { logger } from '@sentry/utils';
import { NATIVE } from '../wrapper';
/** Adds ViewHierarchy to error events */
export class ViewHierarchy {
    constructor() {
        /**
         * @inheritDoc
         */
        this.name = ViewHierarchy.id;
    }
    /**
     * @inheritDoc
     */
    setupOnce(addGlobalEventProcessor) {
        addGlobalEventProcessor((event, hint) => __awaiter(this, void 0, void 0, function* () {
            const hasException = event.exception && event.exception.values && event.exception.values.length > 0;
            if (!hasException) {
                return event;
            }
            let viewHierarchy = null;
            try {
                viewHierarchy = yield NATIVE.fetchViewHierarchy();
            }
            catch (e) {
                logger.error('Failed to get view hierarchy from native.', e);
            }
            if (viewHierarchy) {
                hint.attachments = [
                    {
                        filename: ViewHierarchy._fileName,
                        contentType: ViewHierarchy._contentType,
                        attachmentType: ViewHierarchy._attachmentType,
                        data: viewHierarchy,
                    },
                    ...((hint === null || hint === void 0 ? void 0 : hint.attachments) || []),
                ];
            }
            return event;
        }));
    }
}
/**
 * @inheritDoc
 */
ViewHierarchy.id = 'ViewHierarchy';
ViewHierarchy._fileName = 'view-hierarchy.json';
ViewHierarchy._contentType = 'application/json';
ViewHierarchy._attachmentType = 'event.view_hierarchy';
//# sourceMappingURL=viewhierarchy.js.map