import { Platform } from '@expo/eas-build-job';
import EasCommand from '../../commandUtils/EasCommand';
import { ExpoGraphqlClient } from '../../commandUtils/context/contextUtils/createGraphqlClient';
import { BuildFragment } from '../../graphql/generated';
interface BuildResignFlags {
    json: boolean;
    nonInteractive: boolean;
    offset?: number;
    limit?: number;
    platform?: Platform;
    profile?: string;
    maybeBuildId?: string;
    wait: boolean;
}
interface RawBuildResignFlags {
    json: boolean;
    'non-interactive': boolean;
    offset: number | undefined;
    limit: number | undefined;
    platform: 'android' | 'ios' | undefined;
    profile: string | undefined;
    wait: boolean;
    id: string | undefined;
}
export default class BuildResign extends EasCommand {
    static description: string;
    static flags: {
        json: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        'non-interactive': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        offset: import("@oclif/core/lib/interfaces").OptionFlag<number | undefined>;
        limit: import("@oclif/core/lib/interfaces").OptionFlag<number | undefined>;
        platform: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        profile: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        wait: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        id: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
    };
    static contextDefinition: {
        vcsClient: import("../../commandUtils/context/VcsClientContextField").default;
        analytics: import("../../commandUtils/context/AnalyticsContextField").default;
        projectDir: import("../../commandUtils/context/ProjectDirContextField").default;
        getDynamicPublicProjectConfigAsync: import("../../commandUtils/context/DynamicProjectConfigContextField").DynamicPublicProjectConfigContextField;
        getDynamicPrivateProjectConfigAsync: import("../../commandUtils/context/DynamicProjectConfigContextField").DynamicPrivateProjectConfigContextField;
        loggedIn: import("../../commandUtils/context/LoggedInContextField").default;
    };
    runAsync(): Promise<void>;
    sanitizeFlags(flags: RawBuildResignFlags): BuildResignFlags;
    ensureBuildSelectedAsync({ graphqlClient, projectId, platform, nonInteractive, limit, offset, }: {
        graphqlClient: ExpoGraphqlClient;
        projectId: string;
        platform: Platform;
        nonInteractive: boolean;
        limit?: number;
        offset?: number;
    }, maybeBuild?: BuildFragment): Promise<BuildFragment>;
    maybeGetBuildAsync(graphqlClient: ExpoGraphqlClient, maybeBuildId?: string, maybePlatform?: Platform): Promise<BuildFragment | undefined>;
}
export {};
