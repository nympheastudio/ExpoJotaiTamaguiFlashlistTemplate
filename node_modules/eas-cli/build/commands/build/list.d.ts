import { BuildDistributionType, BuildStatus } from '../../build/types';
import EasCommand from '../../commandUtils/EasCommand';
import { RequestedPlatform } from '../../platform';
export default class BuildList extends EasCommand {
    static description: string;
    static flags: {
        simulator: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        json: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        'non-interactive': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        limit: import("@oclif/core/lib/interfaces").OptionFlag<number | undefined>;
        offset: import("@oclif/core/lib/interfaces").OptionFlag<number | undefined>;
        platform: import("@oclif/core/lib/interfaces").OptionFlag<RequestedPlatform | undefined>;
        status: import("@oclif/core/lib/interfaces").OptionFlag<BuildStatus | undefined>;
        distribution: import("@oclif/core/lib/interfaces").OptionFlag<BuildDistributionType | undefined>;
        channel: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        appVersion: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        appBuildVersion: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        sdkVersion: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        runtimeVersion: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        appIdentifier: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        buildProfile: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        gitCommitHash: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
    };
    static contextDefinition: {
        vcsClient: import("../../commandUtils/context/VcsClientContextField").default;
        loggedIn: import("../../commandUtils/context/LoggedInContextField").default;
        privateProjectConfig: import("../../commandUtils/context/PrivateProjectConfigContextField").PrivateProjectConfigContextField;
    };
    runAsync(): Promise<void>;
}
