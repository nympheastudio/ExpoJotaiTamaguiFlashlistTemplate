{"version":3,"file":"sentryeventemitter.js","sourceRoot":"","sources":["../../../src/js/utils/sentryeventemitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '@sentry/utils';\nimport type { EmitterSubscription, NativeModule } from 'react-native';\nimport { NativeEventEmitter } from 'react-native';\n\nimport { getRNSentryModule } from '../wrapper';\n\nexport const NewFrameEventName = 'rn_sentry_new_frame';\nexport type NewFrameEventName = typeof NewFrameEventName;\nexport type NewFrameEvent = { newFrameTimestampInSeconds: number };\n\nexport interface SentryEventEmitter {\n  /**\n   * Initializes the native event emitter\n   * This method is synchronous in JS but the native event emitter starts asynchronously\n   * https://github.com/facebook/react-native/blob/d09c02f9e2d468e4d0bde51890e312ae7003a3e6/packages/react-native/React/Modules/RCTEventEmitter.m#L95\n   */\n  initAsync: (eventType: NewFrameEventName) => void;\n  closeAllAsync: () => void;\n  addListener: (eventType: NewFrameEventName, listener: (event: NewFrameEvent) => void) => void;\n  removeListener: (eventType: NewFrameEventName, listener: (event: NewFrameEvent) => void) => void;\n  once: (eventType: NewFrameEventName, listener: (event: NewFrameEvent) => void) => void;\n}\n\n/**\n * Creates emitter that allows to listen to native RNSentry events\n */\nexport function createSentryEventEmitter(\n  sentryNativeModule: NativeModule | undefined = getRNSentryModule(),\n  createNativeEventEmitter: (nativeModule: NativeModule | undefined) => NativeEventEmitter = nativeModule =>\n    new NativeEventEmitter(nativeModule),\n): SentryEventEmitter {\n  if (!sentryNativeModule) {\n    return createNoopSentryEventEmitter();\n  }\n\n  const openNativeListeners = new Map<NewFrameEventName, EmitterSubscription>();\n  const listenersMap = new Map<NewFrameEventName, Map<(event: NewFrameEvent) => void, true>>();\n\n  const nativeEventEmitter = createNativeEventEmitter(getRNSentryModule());\n\n  const addListener = function (eventType: NewFrameEventName, listener: (event: NewFrameEvent) => void): void {\n    const map = listenersMap.get(eventType);\n    if (!map) {\n      logger.warn(`EventEmitter was not initialized for event type: ${eventType}`);\n      return;\n    }\n    listenersMap.get(eventType)?.set(listener, true);\n  };\n\n  const removeListener = function (eventType: NewFrameEventName, listener: (event: NewFrameEvent) => void): void {\n    listenersMap.get(eventType)?.delete(listener);\n  };\n\n  return {\n    initAsync(eventType: NewFrameEventName) {\n      if (openNativeListeners.has(eventType)) {\n        return;\n      }\n\n      const nativeListener = nativeEventEmitter.addListener(eventType, (event: NewFrameEvent) => {\n        const listeners = listenersMap.get(eventType);\n        if (!listeners) {\n          return;\n        }\n\n        listeners.forEach((_, listener) => {\n          listener(event);\n        });\n      });\n      openNativeListeners.set(eventType, nativeListener);\n\n      listenersMap.set(eventType, new Map());\n    },\n    closeAllAsync() {\n      openNativeListeners.forEach(subscription => {\n        subscription.remove();\n      });\n      openNativeListeners.clear();\n      listenersMap.clear();\n    },\n    addListener,\n    removeListener,\n    once(eventType: NewFrameEventName, listener: (event: NewFrameEvent) => void) {\n      const tmpListener = (event: NewFrameEvent): void => {\n        listener(event);\n        removeListener(eventType, tmpListener);\n      };\n      addListener(eventType, tmpListener);\n    },\n  };\n}\n\nfunction createNoopSentryEventEmitter(): SentryEventEmitter {\n  return {\n    initAsync: () => {\n      logger.warn('Noop SentryEventEmitter: initAsync');\n    },\n    closeAllAsync: () => {\n      logger.warn('Noop SentryEventEmitter: closeAllAsync');\n    },\n    addListener: () => {\n      logger.warn('Noop SentryEventEmitter: addListener');\n    },\n    removeListener: () => {\n      logger.warn('Noop SentryEventEmitter: removeListener');\n    },\n    once: () => {\n      logger.warn('Noop SentryEventEmitter: once');\n    },\n  };\n}\n"]}