import { z } from 'zod';
import { LoggerLevel } from '@expo/logger';
import { BuildTrigger } from './common';
export declare namespace Generic {
    type Job = z.infer<typeof JobZ>;
    const JobZ: z.ZodObject<{
        projectArchive: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.GIT>;
            repositoryUrl: z.ZodString;
            gitRef: z.ZodNullable<z.ZodString>;
            gitCommitHash: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: import("./common").ArchiveSourceType.GIT;
            repositoryUrl: string;
            gitRef: string | null;
            gitCommitHash: string;
        }, {
            type: import("./common").ArchiveSourceType.GIT;
            repositoryUrl: string;
            gitRef: string | null;
            gitCommitHash: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.PATH>;
            path: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: import("./common").ArchiveSourceType.PATH;
            path: string;
        }, {
            type: import("./common").ArchiveSourceType.PATH;
            path: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.URL>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: import("./common").ArchiveSourceType.URL;
            url: string;
        }, {
            type: import("./common").ArchiveSourceType.URL;
            url: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.GCS>;
            bucketKey: z.ZodString;
            metadataLocation: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: import("./common").ArchiveSourceType.GCS;
            bucketKey: string;
            metadataLocation?: string | undefined;
        }, {
            type: import("./common").ArchiveSourceType.GCS;
            bucketKey: string;
            metadataLocation?: string | undefined;
        }>]>;
        customBuildConfig: z.ZodObject<{
            path: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            path: string;
        }, {
            path: string;
        }>;
        secrets: z.ZodObject<{
            robotAccessToken: z.ZodString;
            environmentSecrets: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodString;
                type: z.ZodNativeEnum<typeof import("./common").EnvironmentSecretType>;
            }, "strip", z.ZodTypeAny, {
                type: import("./common").EnvironmentSecretType;
                value: string;
                name: string;
            }, {
                type: import("./common").EnvironmentSecretType;
                value: string;
                name: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            environmentSecrets: {
                type: import("./common").EnvironmentSecretType;
                value: string;
                name: string;
            }[];
            robotAccessToken: string;
        }, {
            environmentSecrets: {
                type: import("./common").EnvironmentSecretType;
                value: string;
                name: string;
            }[];
            robotAccessToken: string;
        }>;
        expoDevUrl: z.ZodString;
        builderEnvironment: z.ZodObject<{
            image: z.ZodString;
            node: z.ZodOptional<z.ZodString>;
            yarn: z.ZodOptional<z.ZodString>;
            pnpm: z.ZodOptional<z.ZodString>;
            bun: z.ZodOptional<z.ZodString>;
            env: z.ZodRecord<z.ZodString, z.ZodString>;
            ndk: z.ZodOptional<z.ZodString>;
            bundler: z.ZodOptional<z.ZodString>;
            fastlane: z.ZodOptional<z.ZodString>;
            cocoapods: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            env: Record<string, string>;
            image: string;
            node?: string | undefined;
            yarn?: string | undefined;
            pnpm?: string | undefined;
            bun?: string | undefined;
            ndk?: string | undefined;
            bundler?: string | undefined;
            fastlane?: string | undefined;
            cocoapods?: string | undefined;
        }, {
            env: Record<string, string>;
            image: string;
            node?: string | undefined;
            yarn?: string | undefined;
            pnpm?: string | undefined;
            bun?: string | undefined;
            ndk?: string | undefined;
            bundler?: string | undefined;
            fastlane?: string | undefined;
            cocoapods?: string | undefined;
        }>;
        platform: z.ZodOptional<z.ZodNever>;
        type: z.ZodOptional<z.ZodNever>;
        triggeredBy: z.ZodLiteral<BuildTrigger.GIT_BASED_INTEGRATION>;
        loggerLevel: z.ZodOptional<z.ZodNativeEnum<typeof LoggerLevel>>;
    }, "strip", z.ZodTypeAny, {
        builderEnvironment: {
            env: Record<string, string>;
            image: string;
            node?: string | undefined;
            yarn?: string | undefined;
            pnpm?: string | undefined;
            bun?: string | undefined;
            ndk?: string | undefined;
            bundler?: string | undefined;
            fastlane?: string | undefined;
            cocoapods?: string | undefined;
        };
        triggeredBy: BuildTrigger.GIT_BASED_INTEGRATION;
        projectArchive: {
            type: import("./common").ArchiveSourceType.GIT;
            repositoryUrl: string;
            gitRef: string | null;
            gitCommitHash: string;
        } | {
            type: import("./common").ArchiveSourceType.PATH;
            path: string;
        } | {
            type: import("./common").ArchiveSourceType.URL;
            url: string;
        } | {
            type: import("./common").ArchiveSourceType.GCS;
            bucketKey: string;
            metadataLocation?: string | undefined;
        };
        secrets: {
            environmentSecrets: {
                type: import("./common").EnvironmentSecretType;
                value: string;
                name: string;
            }[];
            robotAccessToken: string;
        };
        customBuildConfig: {
            path: string;
        };
        expoDevUrl: string;
        platform?: undefined;
        type?: undefined;
        loggerLevel?: LoggerLevel | undefined;
    }, {
        builderEnvironment: {
            env: Record<string, string>;
            image: string;
            node?: string | undefined;
            yarn?: string | undefined;
            pnpm?: string | undefined;
            bun?: string | undefined;
            ndk?: string | undefined;
            bundler?: string | undefined;
            fastlane?: string | undefined;
            cocoapods?: string | undefined;
        };
        triggeredBy: BuildTrigger.GIT_BASED_INTEGRATION;
        projectArchive: {
            type: import("./common").ArchiveSourceType.GIT;
            repositoryUrl: string;
            gitRef: string | null;
            gitCommitHash: string;
        } | {
            type: import("./common").ArchiveSourceType.PATH;
            path: string;
        } | {
            type: import("./common").ArchiveSourceType.URL;
            url: string;
        } | {
            type: import("./common").ArchiveSourceType.GCS;
            bucketKey: string;
            metadataLocation?: string | undefined;
        };
        secrets: {
            environmentSecrets: {
                type: import("./common").EnvironmentSecretType;
                value: string;
                name: string;
            }[];
            robotAccessToken: string;
        };
        customBuildConfig: {
            path: string;
        };
        expoDevUrl: string;
        platform?: undefined;
        type?: undefined;
        loggerLevel?: LoggerLevel | undefined;
    }>;
}
