import { __awaiter } from "tslib";
import { getExpoDevice } from '../utils/expomodules';
/** Load device context from expo modules. */
export class ExpoContext {
    constructor() {
        /**
         * @inheritDoc
         */
        this.name = ExpoContext.id;
    }
    /**
     * @inheritDoc
     */
    setupOnce(addGlobalEventProcessor, getCurrentHub) {
        addGlobalEventProcessor((event) => __awaiter(this, void 0, void 0, function* () {
            const self = getCurrentHub().getIntegration(ExpoContext);
            if (!self) {
                return event;
            }
            const expoDeviceContext = getExpoDeviceContext();
            if (expoDeviceContext) {
                event.contexts = event.contexts || {};
                event.contexts.device = Object.assign(Object.assign({}, expoDeviceContext), event.contexts.device);
            }
            const expoOsContext = getExpoOsContext();
            if (expoOsContext) {
                event.contexts = event.contexts || {};
                event.contexts.os = Object.assign(Object.assign({}, expoOsContext), event.contexts.os);
            }
            return event;
        }));
    }
}
/**
 * @inheritDoc
 */
ExpoContext.id = 'ExpoContext';
/**
 * Returns the Expo Device context if present
 */
function getExpoDeviceContext() {
    const expoDevice = getExpoDevice();
    if (!expoDevice) {
        return undefined;
    }
    return {
        name: expoDevice.deviceName,
        simulator: !(expoDevice === null || expoDevice === void 0 ? void 0 : expoDevice.isDevice),
        model: expoDevice.modelName,
        manufacturer: expoDevice.manufacturer,
        memory_size: expoDevice.totalMemory,
    };
}
/**
 * Returns the Expo OS context if present
 */
function getExpoOsContext() {
    const expoDevice = getExpoDevice();
    if (!expoDevice) {
        return undefined;
    }
    return {
        build: expoDevice.osBuildId,
        version: expoDevice.osVersion,
        name: expoDevice.osName,
    };
}
//# sourceMappingURL=expocontext.js.map