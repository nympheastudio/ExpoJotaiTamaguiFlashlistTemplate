import type { Client, Event, EventHint, EventProcessor, Hub, Integration } from '@sentry/types';
interface LinkedErrorsOptions {
    key: string;
    limit: number;
}
/**
 * Processes JS and RN native linked errors.
 */
export declare class NativeLinkedErrors implements Integration {
    /**
     * @inheritDoc
     */
    static id: string;
    /**
     * @inheritDoc
     */
    name: string;
    private readonly _key;
    private readonly _limit;
    private _nativePackage;
    /**
     * @inheritDoc
     */
    constructor(options?: Partial<LinkedErrorsOptions>);
    /**
     * @inheritDoc
     */
    setupOnce(_addGlobalEventProcessor: (callback: EventProcessor) => void, _getCurrentHub: () => Hub): void;
    /**
     * @inheritDoc
     */
    preprocessEvent(event: Event, hint: EventHint | undefined, client: Client): void;
    /**
     * Enriches passed event with linked exceptions and native debug meta images.
     */
    private _handler;
    /**
     * Walks linked errors and created Sentry exceptions chain.
     * Collects debug images from native errors stack frames.
     */
    private _walkErrorTree;
    /**
     * Converts a Java Throwable to an SentryException
     */
    private _exceptionFromJavaStackElements;
    /**
     * Converts StackAddresses to a SentryException with DebugMetaImages
     */
    private _exceptionFromAppleStackReturnAddresses;
    /**
     * Fetches the native package/image name from the native layer
     */
    private _fetchNativePackage;
    /**
     * Fetches native debug image information on iOS
     */
    private _fetchNativeStackFrames;
}
export {};
//# sourceMappingURL=nativelinkederrors.d.ts.map
