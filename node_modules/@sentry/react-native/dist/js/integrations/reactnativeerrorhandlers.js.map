{"version":3,"file":"reactnativeerrorhandlers.js","sourceRoot":"","sources":["../../../src/js/integrations/reactnativeerrorhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport type { EventHint, Integration } from '@sentry/types';\nimport { addExceptionMechanism, logger } from '@sentry/utils';\n\nimport type { ReactNativeClient } from '../client';\nimport { createSyntheticError, isErrorLike } from '../utils/error';\nimport { ReactNativeLibraries } from '../utils/rnlibraries';\nimport { RN_GLOBAL_OBJ } from '../utils/worldwide';\n\n/** ReactNativeErrorHandlers Options */\ninterface ReactNativeErrorHandlersOptions {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n  patchGlobalPromise: boolean;\n}\n\ninterface PromiseRejectionTrackingOptions {\n  onUnhandled: (id: string, error: unknown) => void;\n  onHandled: (id: string) => void;\n}\n\n/** ReactNativeErrorHandlers Integration */\nexport class ReactNativeErrorHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReactNativeErrorHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = ReactNativeErrorHandlers.id;\n\n  /** ReactNativeOptions */\n  private readonly _options: ReactNativeErrorHandlersOptions;\n\n  /** Constructor */\n  public constructor(options?: Partial<ReactNativeErrorHandlersOptions>) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      patchGlobalPromise: true,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    this._handleUnhandledRejections();\n    this._handleOnError();\n  }\n\n  /**\n   * Handle Promises\n   */\n  private _handleUnhandledRejections(): void {\n    if (this._options.onunhandledrejection) {\n      if (this._options.patchGlobalPromise) {\n        this._polyfillPromise();\n      }\n\n      this._attachUnhandledRejectionHandler();\n      this._checkPromiseAndWarn();\n    }\n  }\n  /**\n   * Polyfill the global promise instance with one we can be sure that we can attach the tracking to.\n   *\n   * In newer RN versions >=0.63, the global promise is not the same reference as the one imported from the promise library.\n   * This is due to a version mismatch between promise versions.\n   * Originally we tried a solution where we would have you put a package resolution to ensure the promise instances match. However,\n   * - Using a package resolution requires the you to manually troubleshoot.\n   * - The package resolution fix no longer works with 0.67 on iOS Hermes.\n   */\n  private _polyfillPromise(): void {\n    if (!ReactNativeLibraries.Utilities) {\n      logger.warn('Could not polyfill Promise. React Native Libraries Utilities not found.');\n      return;\n    }\n\n    const Promise = this._getPromisePolyfill();\n\n    // As of RN 0.67 only done and finally are used\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    require('promise/setimmediate/done');\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    require('promise/setimmediate/finally');\n\n    ReactNativeLibraries.Utilities.polyfillGlobal('Promise', () => Promise);\n  }\n\n  /**\n   * Single source of truth for the Promise implementation we want to use.\n   * This is important for verifying that the rejected promise tracing will work as expected.\n   */\n  private _getPromisePolyfill(): unknown {\n    /* eslint-disable import/no-extraneous-dependencies,@typescript-eslint/no-var-requires */\n    // Below, we follow the exact way React Native initializes its promise library, and we globally replace it.\n    return require('promise/setimmediate/es6-extensions');\n  }\n\n  /**\n   * Attach the unhandled rejection handler\n   */\n  private _attachUnhandledRejectionHandler(): void {\n    const tracking = this._loadRejectionTracking();\n\n    const promiseRejectionTrackingOptions: PromiseRejectionTrackingOptions = {\n      onUnhandled: (id, rejection = {}) => {\n        // eslint-disable-next-line no-console\n        console.warn(`Possible Unhandled Promise Rejection (id: ${id}):\\n${rejection}`);\n      },\n      onHandled: id => {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Promise Rejection Handled (id: ${id})\\n` +\n            'This means you can ignore any previous messages of the form ' +\n            `\"Possible Unhandled Promise Rejection (id: ${id}):\"`,\n        );\n      },\n    };\n\n    tracking.enable({\n      allRejections: true,\n      onUnhandled: (id: string, error: unknown) => {\n        if (__DEV__) {\n          promiseRejectionTrackingOptions.onUnhandled(id, error);\n        }\n\n        getCurrentHub().captureException(error, {\n          data: { id },\n          originalException: error,\n          syntheticException: isErrorLike(error) ? undefined : createSyntheticError(),\n        });\n      },\n      onHandled: (id: string) => {\n        promiseRejectionTrackingOptions.onHandled(id);\n      },\n    });\n  }\n  /**\n   * Checks if the promise is the same one or not, if not it will warn the user\n   */\n  private _checkPromiseAndWarn(): void {\n    try {\n      // `promise` package is a dependency of react-native, therefore it is always available.\n      // but it is possible that the user has installed a different version of promise\n      // or dependency that uses a different version.\n      // We have to check if the React Native Promise and the `promise` package Promise are using the same reference.\n      // If they are not, likely there are multiple versions of the `promise` package installed.\n      const ReactNativePromise = ReactNativeLibraries.Promise;\n      // eslint-disable-next-line @typescript-eslint/no-var-requires,import/no-extraneous-dependencies\n      const PromisePackagePromise = require('promise/setimmediate/es6-extensions');\n      const UsedPromisePolyfill = this._getPromisePolyfill();\n\n      if (ReactNativePromise !== PromisePackagePromise) {\n        logger.warn(\n          'You appear to have multiple versions of the \"promise\" package installed. ' +\n            'This may cause unexpected behavior like undefined `Promise.allSettled`. ' +\n            'Please install the `promise` package manually using the exact version as the React Native package. ' +\n            'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.',\n        );\n      }\n\n      // This only make sense if the user disabled the integration Polyfill\n      if (UsedPromisePolyfill !== RN_GLOBAL_OBJ.Promise) {\n        logger.warn(\n          'Unhandled promise rejections will not be caught by Sentry. ' +\n            'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.',\n        );\n      } else {\n        logger.log('Unhandled promise rejections will be caught by Sentry.');\n      }\n    } catch (e) {\n      // Do Nothing\n      logger.warn(\n        'Unhandled promise rejections will not be caught by Sentry. ' +\n          'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.',\n      );\n    }\n  }\n  /**\n   * Handle errors\n   */\n  private _handleOnError(): void {\n    if (this._options.onerror) {\n      let handlingFatal = false;\n\n      const errorUtils = RN_GLOBAL_OBJ.ErrorUtils;\n      if (!errorUtils) {\n        logger.warn('ErrorUtils not found. Can be caused by different environment for example react-native-web.');\n        return;\n      }\n\n      const defaultHandler = errorUtils.getGlobalHandler && errorUtils.getGlobalHandler();\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      errorUtils.setGlobalHandler(async (error: any, isFatal?: boolean) => {\n        // We want to handle fatals, but only in production mode.\n        const shouldHandleFatal = isFatal && !__DEV__;\n        if (shouldHandleFatal) {\n          if (handlingFatal) {\n            logger.log('Encountered multiple fatals in a row. The latest:', error);\n            return;\n          }\n          handlingFatal = true;\n        }\n\n        const currentHub = getCurrentHub();\n        const client = currentHub.getClient<ReactNativeClient>();\n        const scope = currentHub.getScope();\n\n        if (!client) {\n          logger.error('Sentry client is missing, the error event might be lost.', error);\n\n          // If there is no client something is fishy, anyway we call the default handler\n          defaultHandler(error, isFatal);\n\n          return;\n        }\n\n        const options = client.getOptions();\n\n        const hint: EventHint = {\n          originalException: error,\n          attachments: scope?.getAttachments(),\n        };\n        const event = await client.eventFromException(error, hint);\n\n        if (isFatal) {\n          event.level = 'fatal';\n\n          addExceptionMechanism(event, {\n            handled: false,\n            type: 'onerror',\n          });\n        } else {\n          event.level = 'error';\n\n          addExceptionMechanism(event, {\n            handled: true,\n            type: 'generic',\n          });\n        }\n\n        currentHub.captureEvent(event, hint);\n\n        if (!__DEV__) {\n          void client.flush(options.shutdownTimeout || 2000).then(\n            () => {\n              defaultHandler(error, isFatal);\n            },\n            (reason: unknown) => {\n              logger.error(\n                '[ReactNativeErrorHandlers] Error while flushing the event cache after uncaught error.',\n                reason,\n              );\n            },\n          );\n        } else {\n          // If in dev, we call the default handler anyway and hope the error will be sent\n          // Just for a better dev experience\n          defaultHandler(error, isFatal);\n        }\n      });\n    }\n  }\n\n  /**\n   * Loads and returns rejection tracking module\n   */\n  private _loadRejectionTracking(): {\n    disable: () => void;\n    enable: (arg: unknown) => void;\n  } {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires,import/no-extraneous-dependencies\n    return require('promise/setimmediate/rejection-tracking');\n  }\n}\n"]}