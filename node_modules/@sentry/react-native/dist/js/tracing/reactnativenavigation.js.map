{"version":3,"file":"reactnativenavigation.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnativenavigation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Transaction as TransactionType, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport type { EmitterSubscription } from '../utils/rnlibrariesinterface';\nimport type { OnConfirmRoute, TransactionCreator } from './routingInstrumentation';\nimport { InternalRoutingInstrumentation } from './routingInstrumentation';\nimport type { BeforeNavigate, RouteChangeContextData } from './types';\nimport { customTransactionSource, defaultTransactionSource, getBlankTransactionContext } from './utils';\n\ninterface ReactNativeNavigationOptions {\n  /**\n   * How long the instrumentation will wait for the route to mount after a change has been initiated,\n   * before the transaction is discarded.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  routeChangeTimeoutMs: number;\n  /**\n   * Instrumentation will create a transaction on tab change.\n   * By default only navigation commands create transactions.\n   *\n   * Default: true\n   */\n  enableTabsInstrumentation: boolean;\n}\n\nconst defaultOptions: ReactNativeNavigationOptions = {\n  routeChangeTimeoutMs: 1000,\n  enableTabsInstrumentation: true,\n};\n\ninterface ComponentEvent {\n  componentId: string;\n}\n\ntype ComponentType = 'Component' | 'TopBarTitle' | 'TopBarBackground' | 'TopBarButton';\n\nexport interface ComponentWillAppearEvent extends ComponentEvent {\n  componentName: string;\n  passProps?: Record<string | number | symbol, unknown>;\n  componentType: ComponentType;\n}\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface BottomTabPressedEvent {\n  tabIndex: number;\n}\n\nexport interface EventsRegistry {\n  registerComponentWillAppearListener(callback: (event: ComponentWillAppearEvent) => void): EmitterSubscription;\n  registerCommandListener(callback: (name: string, params: unknown) => void): EventSubscription;\n  registerBottomTabPressedListener(callback: (event: BottomTabPressedEvent) => void): EmitterSubscription;\n}\n\nexport interface NavigationDelegate {\n  events: () => EventsRegistry;\n}\n\n/**\n * Instrumentation for React Native Navigation. See docs or sample app for usage.\n *\n * How this works:\n * - `_onCommand` is called every time a commands happens and sets an IdleTransaction on the scope without any route context.\n * - `_onComponentWillAppear` is then called AFTER the state change happens due to a dispatch and sets the route context onto the active transaction.\n * - If `_onComponentWillAppear` isn't called within `options.routeChangeTimeoutMs` of the dispatch, then the transaction is not sampled and finished.\n */\nexport class ReactNativeNavigationInstrumentation extends InternalRoutingInstrumentation {\n  public static instrumentationName: string = 'react-native-navigation';\n\n  public readonly name: string = ReactNativeNavigationInstrumentation.instrumentationName;\n\n  private _navigation: NavigationDelegate;\n  private _options: ReactNativeNavigationOptions;\n\n  private _prevComponentEvent: ComponentWillAppearEvent | null = null;\n\n  private _latestTransaction?: TransactionType;\n  private _recentComponentIds: string[] = [];\n  private _stateChangeTimeout?: number | undefined;\n\n  public constructor(\n    /** The react native navigation `NavigationDelegate`. This is usually the import named `Navigation`. */\n    navigation: unknown,\n    options: Partial<ReactNativeNavigationOptions> = {},\n  ) {\n    super();\n\n    this._navigation = navigation as NavigationDelegate;\n\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n  }\n\n  /**\n   * Registers the event listeners for React Native Navigation\n   */\n  public registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate,\n    onConfirmRoute: OnConfirmRoute,\n  ): void {\n    super.registerRoutingInstrumentation(listener, beforeNavigate, onConfirmRoute);\n\n    this._navigation.events().registerCommandListener(this._onNavigation.bind(this));\n\n    if (this._options.enableTabsInstrumentation) {\n      this._navigation.events().registerBottomTabPressedListener(this._onNavigation.bind(this));\n    }\n\n    this._navigation.events().registerComponentWillAppearListener(this._onComponentWillAppear.bind(this));\n  }\n\n  /**\n   * To be called when a navigation is initiated. (Command, BottomTabSelected, etc.)\n   */\n  private _onNavigation(): void {\n    if (this._latestTransaction) {\n      this._discardLatestTransaction();\n    }\n\n    this._latestTransaction = this.onRouteWillChange(\n      getBlankTransactionContext(ReactNativeNavigationInstrumentation.name),\n    );\n\n    this._stateChangeTimeout = setTimeout(\n      this._discardLatestTransaction.bind(this),\n      this._options.routeChangeTimeoutMs,\n    );\n  }\n\n  /**\n   * To be called AFTER the state has been changed to populate the transaction with the current route.\n   */\n  private _onComponentWillAppear(event: ComponentWillAppearEvent): void {\n    if (!this._latestTransaction) {\n      return;\n    }\n\n    // We ignore actions that pertain to the same screen.\n    const isSameComponent = this._prevComponentEvent && event.componentId === this._prevComponentEvent.componentId;\n    if (isSameComponent) {\n      this._discardLatestTransaction();\n      return;\n    }\n\n    this._clearStateChangeTimeout();\n\n    const originalContext = this._latestTransaction.toContext();\n    const routeHasBeenSeen = this._recentComponentIds.includes(event.componentId);\n\n    const data: RouteChangeContextData = {\n      ...originalContext.data,\n      route: {\n        ...event,\n        name: event.componentName,\n        hasBeenSeen: routeHasBeenSeen,\n      },\n      previousRoute: this._prevComponentEvent\n        ? {\n            ...this._prevComponentEvent,\n            name: this._prevComponentEvent?.componentName,\n          }\n        : null,\n    };\n\n    const updatedContext = {\n      ...originalContext,\n      name: event.componentName,\n      tags: {\n        ...originalContext.tags,\n        'routing.route.name': event.componentName,\n      },\n      data,\n    };\n\n    const finalContext = this._prepareFinalContext(updatedContext);\n    this._latestTransaction.updateWithContext(finalContext);\n\n    const isCustomName = updatedContext.name !== finalContext.name;\n    this._latestTransaction.setName(\n      finalContext.name,\n      isCustomName ? customTransactionSource : defaultTransactionSource,\n    );\n\n    this._onConfirmRoute?.(finalContext);\n    this._prevComponentEvent = event;\n\n    this._latestTransaction = undefined;\n  }\n\n  /** Creates final transaction context before confirmation */\n  private _prepareFinalContext(updatedContext: TransactionContext): TransactionContext {\n    let finalContext = this._beforeNavigate?.({ ...updatedContext });\n\n    // This block is to catch users not returning a transaction context\n    if (!finalContext) {\n      logger.error(\n        `[${ReactNativeNavigationInstrumentation.name}] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`,\n      );\n\n      finalContext = {\n        ...updatedContext,\n        sampled: false,\n      };\n    }\n\n    if (finalContext.sampled === false) {\n      logger.log(\n        `[${ReactNativeNavigationInstrumentation.name}] Will not send transaction \"${finalContext.name}\" due to beforeNavigate.`,\n      );\n    }\n\n    return finalContext;\n  }\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _discardLatestTransaction(): void {\n    if (this._latestTransaction) {\n      this._latestTransaction.sampled = false;\n      this._latestTransaction.finish();\n      this._latestTransaction = undefined;\n    }\n\n    this._clearStateChangeTimeout();\n  }\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _clearStateChangeTimeout(): void {\n    if (typeof this._stateChangeTimeout !== 'undefined') {\n      clearTimeout(this._stateChangeTimeout);\n      this._stateChangeTimeout = undefined;\n    }\n  }\n}\n"]}