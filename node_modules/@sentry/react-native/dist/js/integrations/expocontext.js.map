{"version":3,"file":"expocontext.js","sourceRoot":"","sources":["../../../src/js/integrations/expocontext.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAErD,6CAA6C;AAC7C,MAAM,OAAO,WAAW;IAAxB;QAME;;WAEG;QACI,SAAI,GAAW,WAAW,CAAC,EAAE,CAAC;IA2BvC,CAAC;IAzBC;;OAEG;IACI,SAAS,CAAC,uBAA2D,EAAE,aAAwB;QACpG,uBAAuB,CAAC,CAAO,KAAY,EAAE,EAAE;YAC7C,MAAM,IAAI,GAAG,aAAa,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACzD,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO,KAAK,CAAC;aACd;YAED,MAAM,iBAAiB,GAAG,oBAAoB,EAAE,CAAC;YACjD,IAAI,iBAAiB,EAAE;gBACrB,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,EAAE,CAAC;gBACtC,KAAK,CAAC,QAAQ,CAAC,MAAM,mCAAQ,iBAAiB,GAAK,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAE,CAAC;aAC5E;YAED,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;YACzC,IAAI,aAAa,EAAE;gBACjB,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,EAAE,CAAC;gBACtC,KAAK,CAAC,QAAQ,CAAC,EAAE,mCAAQ,aAAa,GAAK,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAE,CAAC;aAChE;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;;AAlCD;;GAEG;AACW,cAAE,GAAW,aAAa,CAAC;AAkC3C;;GAEG;AACH,SAAS,oBAAoB;IAC3B,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IAEnC,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,SAAS,CAAC;KAClB;IAED,OAAO;QACL,IAAI,EAAE,UAAU,CAAC,UAAU;QAC3B,SAAS,EAAE,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,QAAQ,CAAA;QAChC,KAAK,EAAE,UAAU,CAAC,SAAS;QAC3B,YAAY,EAAE,UAAU,CAAC,YAAY;QACrC,WAAW,EAAE,UAAU,CAAC,WAAW;KACpC,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,gBAAgB;IACvB,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IAEnC,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,SAAS,CAAC;KAClB;IAED,OAAO;QACL,KAAK,EAAE,UAAU,CAAC,SAAS;QAC3B,OAAO,EAAE,UAAU,CAAC,SAAS;QAC7B,IAAI,EAAE,UAAU,CAAC,MAAM;KACxB,CAAC;AACJ,CAAC","sourcesContent":["import type { DeviceContext, Event, EventProcessor, Hub, Integration, OsContext } from '@sentry/types';\n\nimport { getExpoDevice } from '../utils/expomodules';\n\n/** Load device context from expo modules. */\nexport class ExpoContext implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ExpoContext';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = ExpoContext.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(async (event: Event) => {\n      const self = getCurrentHub().getIntegration(ExpoContext);\n      if (!self) {\n        return event;\n      }\n\n      const expoDeviceContext = getExpoDeviceContext();\n      if (expoDeviceContext) {\n        event.contexts = event.contexts || {};\n        event.contexts.device = { ...expoDeviceContext, ...event.contexts.device };\n      }\n\n      const expoOsContext = getExpoOsContext();\n      if (expoOsContext) {\n        event.contexts = event.contexts || {};\n        event.contexts.os = { ...expoOsContext, ...event.contexts.os };\n      }\n\n      return event;\n    });\n  }\n}\n\n/**\n * Returns the Expo Device context if present\n */\nfunction getExpoDeviceContext(): DeviceContext | undefined {\n  const expoDevice = getExpoDevice();\n\n  if (!expoDevice) {\n    return undefined;\n  }\n\n  return {\n    name: expoDevice.deviceName,\n    simulator: !expoDevice?.isDevice,\n    model: expoDevice.modelName,\n    manufacturer: expoDevice.manufacturer,\n    memory_size: expoDevice.totalMemory,\n  };\n}\n\n/**\n * Returns the Expo OS context if present\n */\nfunction getExpoOsContext(): OsContext | undefined {\n  const expoDevice = getExpoDevice();\n\n  if (!expoDevice) {\n    return undefined;\n  }\n\n  return {\n    build: expoDevice.osBuildId,\n    version: expoDevice.osVersion,\n    name: expoDevice.osName,\n  };\n}\n"]}