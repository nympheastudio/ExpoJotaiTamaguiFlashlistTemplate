{"version":3,"file":"debugsymbolicator.js","sourceRoot":"","sources":["../../../src/js/integrations/debugsymbolicator.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Event, EventHint, EventProcessor, Hub, Integration, StackFrame as SentryStackFrame } from '@sentry/types';\nimport { addContextToFrame, logger } from '@sentry/utils';\n\nimport { getFramesToPop, isErrorLike } from '../utils/error';\nimport { ReactNativeLibraries } from '../utils/rnlibraries';\nimport { createStealthXhr, XHR_READYSTATE_DONE } from '../utils/xhr';\nimport type * as ReactNative from '../vendor/react-native';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\nconst INTERNAL_CALLSITES_REGEX = new RegExp(['ReactNativeRenderer-dev\\\\.js$', 'MessageQueue\\\\.js$'].join('|'));\n\n/**\n * React Native Error\n */\nexport type ReactNativeError = Error & {\n  framesToPop?: number;\n  jsEngine?: string;\n  preventSymbolication?: boolean;\n  componentStack?: string;\n};\n\n/** Tries to symbolicate the JS stack trace on the device. */\nexport class DebugSymbolicator implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'DebugSymbolicator';\n  /**\n   * @inheritDoc\n   */\n  public name: string = DebugSymbolicator.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(async (event: Event, hint: EventHint) => {\n      const self = getCurrentHub().getIntegration(DebugSymbolicator);\n\n      if (!self) {\n        return event;\n      }\n\n      if (event.exception && isErrorLike(hint.originalException)) {\n        // originalException is ErrorLike object\n        const symbolicatedFrames = await this._symbolicate(\n          hint.originalException.stack,\n          getFramesToPop(hint.originalException as Error),\n        );\n        symbolicatedFrames && this._replaceExceptionFramesInEvent(event, symbolicatedFrames);\n      } else if (hint.syntheticException && isErrorLike(hint.syntheticException)) {\n        // syntheticException is Error object\n        const symbolicatedFrames = await this._symbolicate(\n          hint.syntheticException.stack,\n          getFramesToPop(hint.syntheticException),\n        );\n\n        if (event.exception) {\n          symbolicatedFrames && this._replaceExceptionFramesInEvent(event, symbolicatedFrames);\n        } else if (event.threads) {\n          // RN JS doesn't have threads\n          // syntheticException is used for Sentry.captureMessage() threads\n          symbolicatedFrames && this._replaceThreadFramesInEvent(event, symbolicatedFrames);\n        }\n      }\n\n      return event;\n    });\n  }\n\n  /**\n   * Symbolicates the stack on the device talking to local dev server.\n   * Mutates the passed event.\n   */\n  private async _symbolicate(rawStack: string, skipFirstFrames: number = 0): Promise<SentryStackFrame[] | null> {\n    try {\n      const parsedStack = this._parseErrorStack(rawStack);\n\n      const prettyStack = await this._symbolicateStackTrace(parsedStack);\n      if (!prettyStack) {\n        logger.error('React Native DevServer could not symbolicate the stack trace.');\n        return null;\n      }\n\n      // This has been changed in an react-native version so stack is contained in here\n      const newStack = prettyStack.stack || prettyStack;\n\n      // https://github.com/getsentry/sentry-javascript/blob/739d904342aaf9327312f409952f14ceff4ae1ab/packages/utils/src/stacktrace.ts#L23\n      // Match SentryParser which counts lines of stack (-1 for first line with the Error message)\n      const skipFirstAdjustedToSentryStackParser = Math.max(skipFirstFrames - 1, 0);\n      const stackWithoutPoppedFrames = skipFirstAdjustedToSentryStackParser\n        ? newStack.slice(skipFirstAdjustedToSentryStackParser)\n        : newStack;\n\n      const stackWithoutInternalCallsites = stackWithoutPoppedFrames.filter(\n        (frame: { file?: string }) => frame.file && frame.file.match(INTERNAL_CALLSITES_REGEX) === null,\n      );\n\n      return await this._convertReactNativeFramesToSentryFrames(stackWithoutInternalCallsites);\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.warn(`Unable to symbolicate stack trace: ${error.message}`);\n      }\n      return null;\n    }\n  }\n\n  /**\n   * Converts ReactNativeFrames to frames in the Sentry format\n   * @param frames ReactNativeFrame[]\n   */\n  private async _convertReactNativeFramesToSentryFrames(frames: ReactNative.StackFrame[]): Promise<SentryStackFrame[]> {\n    return Promise.all(\n      frames.map(async (frame: ReactNative.StackFrame): Promise<SentryStackFrame> => {\n        let inApp = !!frame.column && !!frame.lineNumber;\n        inApp =\n          inApp &&\n          frame.file !== undefined &&\n          !frame.file.includes('node_modules') &&\n          !frame.file.includes('native code');\n\n        const newFrame: SentryStackFrame = {\n          lineno: frame.lineNumber,\n          colno: frame.column,\n          filename: frame.file,\n          function: frame.methodName,\n          in_app: inApp,\n        };\n\n        if (inApp) {\n          await this._addSourceContext(newFrame);\n        }\n\n        return newFrame;\n      }),\n    );\n  }\n\n  /**\n   * Replaces the frames in the exception of a error.\n   * @param event Event\n   * @param frames StackFrame[]\n   */\n  private _replaceExceptionFramesInEvent(event: Event, frames: SentryStackFrame[]): void {\n    if (\n      event.exception &&\n      event.exception.values &&\n      event.exception.values[0] &&\n      event.exception.values[0].stacktrace\n    ) {\n      event.exception.values[0].stacktrace.frames = frames.reverse();\n    }\n  }\n\n  /**\n   * Replaces the frames in the thread of a message.\n   * @param event Event\n   * @param frames StackFrame[]\n   */\n  private _replaceThreadFramesInEvent(event: Event, frames: SentryStackFrame[]): void {\n    if (event.threads && event.threads.values && event.threads.values[0] && event.threads.values[0].stacktrace) {\n      event.threads.values[0].stacktrace.frames = frames.reverse();\n    }\n  }\n\n  /**\n   * This tries to add source context for in_app Frames\n   *\n   * @param frame StackFrame\n   * @param getDevServer function from RN to get DevServer URL\n   */\n  private async _addSourceContext(frame: SentryStackFrame): Promise<void> {\n    let sourceContext: string | null = null;\n\n    const segments = frame.filename?.split('/') ?? [];\n\n    const serverUrl = this._getDevServer()?.url;\n    if (!serverUrl) {\n      return;\n    }\n\n    for (const idx in segments) {\n      if (!Object.prototype.hasOwnProperty.call(segments, idx)) {\n        continue;\n      }\n\n      sourceContext = await this._fetchSourceContext(serverUrl, segments, -idx);\n      if (sourceContext) {\n        break;\n      }\n    }\n\n    if (!sourceContext) {\n      return;\n    }\n\n    const lines = sourceContext.split('\\n');\n    addContextToFrame(lines, frame);\n  }\n\n  /**\n   * Get source context for segment\n   */\n  private async _fetchSourceContext(url: string, segments: Array<string>, start: number): Promise<string | null> {\n    return new Promise(resolve => {\n      const fullUrl = `${url}${segments.slice(start).join('/')}`;\n\n      const xhr = createStealthXhr();\n      if (!xhr) {\n        resolve(null);\n        return;\n      }\n\n      xhr.open('GET', fullUrl, true);\n      xhr.send();\n\n      xhr.onreadystatechange = (): void => {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          if (xhr.status !== 200) {\n            resolve(null);\n          }\n          const response = xhr.responseText;\n          if (\n            typeof response !== 'string' ||\n            // Expo Dev Server responses with status 200 and config JSON\n            // when web support not enabled and requested file not found\n            response.startsWith('{')\n          ) {\n            resolve(null);\n          }\n\n          resolve(response);\n        }\n      };\n      xhr.onerror = (): void => {\n        resolve(null);\n      };\n    });\n  }\n\n  /**\n   * Loads and calls RN Core Devtools parseErrorStack function.\n   */\n  private _parseErrorStack(errorStack: string): Array<ReactNative.StackFrame> {\n    if (!ReactNativeLibraries.Devtools) {\n      throw new Error('React Native Devtools not available.');\n    }\n    return ReactNativeLibraries.Devtools.parseErrorStack(errorStack);\n  }\n\n  /**\n   * Loads and calls RN Core Devtools symbolicateStackTrace function.\n   */\n  private _symbolicateStackTrace(\n    stack: Array<ReactNative.StackFrame>,\n    extraData?: Record<string, unknown>,\n  ): Promise<ReactNative.SymbolicatedStackTrace> {\n    if (!ReactNativeLibraries.Devtools) {\n      throw new Error('React Native Devtools not available.');\n    }\n    return ReactNativeLibraries.Devtools.symbolicateStackTrace(stack, extraData);\n  }\n\n  /**\n   * Loads and returns the RN DevServer URL.\n   */\n  private _getDevServer(): ReactNative.DevServerInfo | undefined {\n    try {\n      return ReactNativeLibraries.Devtools?.getDevServer();\n    } catch (_oO) {\n      // We can't load devserver URL\n    }\n    return undefined;\n  }\n}\n"]}