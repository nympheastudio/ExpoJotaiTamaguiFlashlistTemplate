{"version":3,"file":"routingInstrumentation.js","sourceRoot":"","sources":["../../../src/js/tracing/routingInstrumentation.ts"],"names":[],"mappings":"AAqCA;;;GAGG;AACH,MAAM,OAAO,sBAAsB;IAAnC;QAGkB,SAAI,GAAW,sBAAsB,CAAC,mBAAmB,CAAC;IA4B5E,CAAC;IArBC,kBAAkB;IACX,8BAA8B,CACnC,QAA4B,EAC5B,cAA8B,EAC9B,cAA8B;QAE9B,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAED,kBAAkB;IACX,iBAAiB,CAAC,OAA2B;;QAClD,MAAM,WAAW,GAAG,MAAA,IAAI,CAAC,gBAAgB,qDAAG,OAAO,CAAC,CAAC;QAErD,IAAI,WAAW,EAAE;YACf,MAAA,IAAI,CAAC,eAAe,qDAAG,OAAO,CAAC,CAAC;SACjC;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;;AA7Ba,0CAAmB,GAAW,8BAA8B,CAAC;AAgC7E;;GAEG;AACH,MAAM,OAAO,8BAA+B,SAAQ,sBAAsB;IACxE,kBAAkB;IACX,iBAAiB,CAAC,OAA2B;;QAClD,OAAO,MAAA,IAAI,CAAC,gBAAgB,qDAAG,OAAO,CAAC,CAAC;IAC1C,CAAC;CACF","sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { Transaction, TransactionContext } from '@sentry/types';\n\nimport type { BeforeNavigate } from './types';\n\nexport type TransactionCreator = (context: TransactionContext) => Transaction | undefined;\n\nexport type OnConfirmRoute = (context: TransactionContext) => void;\n\nexport interface RoutingInstrumentationInstance {\n  /**\n   * Name of the routing instrumentation\n   */\n  readonly name: string;\n  /**\n   * Registers a listener that's called on every route change with a `TransactionContext`.\n   *\n   * Do not overwrite this unless you know what you are doing.\n   *\n   * @param listener A `RouteListener`\n   * @param beforeNavigate BeforeNavigate\n   * @param inConfirmRoute OnConfirmRoute\n   */\n  registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate,\n    onConfirmRoute: OnConfirmRoute,\n  ): void;\n  /**\n   * To be called when the route changes, BEFORE the new route mounts.\n   * If this is called after a route mounts the child spans will not be correctly attached.\n   *\n   * @param context A `TransactionContext` used to initialize the transaction.\n   */\n  onRouteWillChange(context: TransactionContext): Transaction | undefined;\n}\n\n/**\n * Base Routing Instrumentation. Can be used by users to manually instrument custom routers.\n * Pass this to the tracing integration, and call `onRouteWillChange` every time before a route changes.\n */\nexport class RoutingInstrumentation implements RoutingInstrumentationInstance {\n  public static instrumentationName: string = 'base-routing-instrumentation';\n\n  public readonly name: string = RoutingInstrumentation.instrumentationName;\n\n  protected _getCurrentHub?: () => Hub;\n  protected _beforeNavigate?: BeforeNavigate;\n  protected _onConfirmRoute?: OnConfirmRoute;\n  protected _tracingListener?: TransactionCreator;\n\n  /** @inheritdoc */\n  public registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate,\n    onConfirmRoute: OnConfirmRoute,\n  ): void {\n    this._tracingListener = listener;\n    this._beforeNavigate = beforeNavigate;\n    this._onConfirmRoute = onConfirmRoute;\n  }\n\n  /** @inheritdoc */\n  public onRouteWillChange(context: TransactionContext): Transaction | undefined {\n    const transaction = this._tracingListener?.(context);\n\n    if (transaction) {\n      this._onConfirmRoute?.(context);\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Internal base routing instrumentation where `_onConfirmRoute` is not called in onRouteWillChange\n */\nexport class InternalRoutingInstrumentation extends RoutingInstrumentation {\n  /** @inheritdoc */\n  public onRouteWillChange(context: TransactionContext): Transaction | undefined {\n    return this._tracingListener?.(context);\n  }\n}\n"]}