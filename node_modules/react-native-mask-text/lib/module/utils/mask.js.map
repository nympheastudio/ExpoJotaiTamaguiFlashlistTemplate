{"version":3,"sources":["mask.ts"],"names":["BigNumber","toPattern","unMask","value","type","unMaskedValue","replace","number","parseInt","trimStart","toString","masker","pattern","options","currencyMasker","prefix","decimalSeparator","groupSeparator","precision","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","suffix","precisionDivider","repeat","formatter","bigNumber","config","FORMAT","toFormat","multimasker","patterns","reduce","memo","length","mask","String"],"mappings":"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","sourcesContent":["/* eslint-disable no-confusing-arrow */\nimport { BigNumber } from 'bignumber.js'\nimport toPattern from './toPattern'\n\n/**\n * function unMask(\n * @param {string} value\n * @param {'custom' | 'currency'} type\n * @returns {string}\n */\nfunction unMask(value: string, type: 'custom' | 'currency' = 'custom') {\n  if (type === 'currency') {\n    if (!value) return '0'\n\n    const unMaskedValue = value.replace(/\\D/g, '')\n    const number = parseInt(unMaskedValue.trimStart())\n\n    return number.toString()\n  }\n\n  return value.replace(/\\W/g, '')\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {string} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction masker(value: string, pattern: string, options: any) {\n  return toPattern(value, { pattern, ...options })\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {any} options\n * @returns {string}\n */\nfunction currencyMasker(value = '0', options: any) {\n  const {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    precision,\n    groupSize,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  } = options\n\n  const precisionDivider = parseInt(1 + '0'.repeat(precision || 0))\n  const number = parseInt(value) / precisionDivider\n\n  const formatter = {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  }\n\n  const bigNumber = new BigNumber(number)\n\n  BigNumber.config({ FORMAT: formatter })\n\n  return bigNumber.toFormat(precision)\n}\n\n/**\n * function multimasker(\n * @param {string} value\n * @param {string[]} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction multimasker(value: string, patterns: string[], options: any) {\n  return masker(\n    value,\n    patterns.reduce(\n      (memo: string, pattern: string) =>\n        value.length <= unMask(memo).length ? memo : pattern,\n      patterns[0]\n    ),\n    options\n  )\n}\n\n/**\n * function mask(\n * @param {string} value\n * @param {string | string[]} patterns\n * @param {'custom' | 'currency'} type\n * @param {any} options\n * @returns {string}\n */\nfunction mask(\n  value: string | number,\n  pattern: string | string[] = '',\n  type: 'custom' | 'currency' = 'custom',\n  options?: any\n) {\n  if (type === 'currency') {\n    return currencyMasker(String(value), options)\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {})\n  }\n\n  return multimasker(String(value), pattern, {})\n}\n\nexport { mask, unMask }\n"]}