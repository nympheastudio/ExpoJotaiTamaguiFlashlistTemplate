{"version":3,"file":"addTracingExtensions.js","sourceRoot":"","sources":["../../../src/js/tracing/addTracingExtensions.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,oBAAoB,EAAE,aAAa,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAGnF,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AACzC,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AAEnE;;GAEG;AACH,MAAM,UAAU,qBAAqB;IACnC,oBAAoB,EAAE,CAAC;IACvB,MAAM,OAAO,GAAG,cAAc,EAAE,CAAC;IACjC,IAAI,OAAO,CAAC,UAAU,EAAE;QACtB,OAAO,CAAC,UAAU,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,UAAU,IAAI,EAAE,CAAC;QACpE,IAAI,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,EAAE;YAClD,MAAM,wBAAwB,GAAG,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,gBAA4C,CAAC;YAE5G;;;cAGE;YACF,MAAM,iBAAiB,GAAG,sBAAsB,CAAC,wBAAwB,CAAC,CAAC;YAE3E,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,GAAG,iBAAiB,CAAC;SACpE;KACF;AACH,CAAC;AAQD;;GAEG;AACH,MAAM,sBAAsB,GAAG,CAAC,wBAAkD,EAA4B,EAAE;IAC9G;;OAEG;IACH,SAAS,iBAAiB,CAExB,kBAAsC,EACtC,qBAA6C;QAE7C,iEAAiE;QACjE,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE;YAC1B,kBAAkB,CAAC,EAAE,GAAG,OAAO,CAAC;SACjC;QAED,MAAM,WAAW,GAAgB,wBAAwB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,CAAC;QACnH,MAAM,kBAAkB,GAA8B,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/F,WAAW,CAAC,UAAU,GAAG,CACvB,WAAmG,EAC5D,EAAE;YACzC,OAAO,kBAAkB,iCACpB,WAAW;gBACd,mCAAmC;gBACnC,EAAE,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,EAAE,KAAI,OAAO,IAC9B,CAAC;QACL,CAAC,CAAC;QAEF,MAAM,kBAAkB,GAAG,aAAa,EAAE,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;QAE9E,IAAI,kBAAkB,EAAE;YACtB,kBAAkB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAEnD,6DAA6D;YAC7D,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC;YAE1C,WAAW,CAAC,MAAM,GAAG,CAAC,YAAgC,EAAE,EAAE;gBACxD,IAAI,kBAAkB,EAAE;oBACtB,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;iBACnE;gBAED,OAAO,cAAc,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC;YAEF,6DAA6D;YAC7D,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC;YAEpC,WAAW,CAAC,GAAG,GAAG,CAAC,YAAgC,EAAE,EAAE;gBACrD,IAAI,kBAAkB,EAAE;oBACtB,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;iBACnE;gBAED,OAAO,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;YACxD,CAAC,CAAC;SACH;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import type { Hub, Transaction } from '@sentry/core';\nimport { addTracingExtensions, getCurrentHub, getMainCarrier } from '@sentry/core';\nimport type { CustomSamplingContext, SpanContext, TransactionContext } from '@sentry/types';\n\nimport { DEFAULT } from '../tracing/ops';\nimport { ReactNativeTracing } from '../tracing/reactnativetracing';\n\n/**\n * Adds React Native's extensions. Needs to be called before any transactions are created.\n */\nexport function _addTracingExtensions(): void {\n  addTracingExtensions();\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (carrier.__SENTRY__.extensions.startTransaction) {\n      const originalStartTransaction = carrier.__SENTRY__.extensions.startTransaction as StartTransactionFunction;\n\n      /*\n        Overwrites the transaction start and finish to start and finish stall tracking.\n        Preferably instead of overwriting add a callback method for this in the Transaction itself.\n      */\n      const _startTransaction = _patchStartTransaction(originalStartTransaction);\n\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n  }\n}\n\nexport type StartTransactionFunction = (\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n) => Transaction;\n\n/**\n * Overwrite the startTransaction extension method to start and end stall tracking.\n */\nconst _patchStartTransaction = (originalStartTransaction: StartTransactionFunction): StartTransactionFunction => {\n  /**\n   * Method to overwrite with\n   */\n  function _startTransaction(\n    this: Hub,\n    transactionContext: TransactionContext,\n    customSamplingContext?: CustomSamplingContext,\n  ): Transaction {\n    // Native SDKs require op to be set - for JS Relay sets `default`\n    if (!transactionContext.op) {\n      transactionContext.op = DEFAULT;\n    }\n\n    const transaction: Transaction = originalStartTransaction.apply(this, [transactionContext, customSamplingContext]);\n    const originalStartChild: Transaction['startChild'] = transaction.startChild.bind(transaction);\n    transaction.startChild = (\n      spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'sampled' | 'traceId' | 'parentSpanId'>>,\n    ): ReturnType<Transaction['startChild']> => {\n      return originalStartChild({\n        ...spanContext,\n        // Native SDKs require op to be set\n        op: spanContext?.op || DEFAULT,\n      });\n    };\n\n    const reactNativeTracing = getCurrentHub().getIntegration(ReactNativeTracing);\n\n    if (reactNativeTracing) {\n      reactNativeTracing.onTransactionStart(transaction);\n\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalFinish = transaction.finish;\n\n      transaction.finish = (endTimestamp: number | undefined) => {\n        if (reactNativeTracing) {\n          reactNativeTracing.onTransactionFinish(transaction, endTimestamp);\n        }\n\n        return originalFinish.apply(transaction, [endTimestamp]);\n      };\n\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalEnd = transaction.end;\n\n      transaction.end = (endTimestamp: number | undefined) => {\n        if (reactNativeTracing) {\n          reactNativeTracing.onTransactionFinish(transaction, endTimestamp);\n        }\n\n        return originalEnd.apply(transaction, [endTimestamp]);\n      };\n    }\n\n    return transaction;\n  }\n\n  return _startTransaction;\n};\n"]}