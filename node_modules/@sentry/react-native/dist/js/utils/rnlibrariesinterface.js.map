{"version":3,"file":"rnlibrariesinterface.js","sourceRoot":"","sources":["../../../src/js/utils/rnlibrariesinterface.ts"],"names":[],"mappings":"AAAA,EAAE;AACF,yFAAyF;AACzF,EAAE;AACF,uEAAuE;AACvE,6EAA6E;AAC7E,EAAE","sourcesContent":["//\n// This interface contains all of react-native internals Libraries used in Sentry RN SDK.\n//\n// Containing the internals in one place enables us to handle platforms\n// that don't have all the internals available. For example react-native-web.\n//\n\nimport type { version as RNV } from 'react-native/Libraries/Core/ReactNativeVersion';\n\nimport type * as ReactNative from '../vendor/react-native';\n\nexport type { UnsafeObject } from 'react-native/Libraries/Types/CodegenTypes';\nexport type { EmitterSubscription } from 'react-native/Libraries/vendor/emitter/EventEmitter';\n\nexport interface ReactNativeLibrariesInterface {\n  Devtools?: {\n    parseErrorStack: (errorStack: string) => Array<ReactNative.StackFrame>;\n    symbolicateStackTrace: (\n      stack: Array<ReactNative.StackFrame>,\n      extraData?: Record<string, unknown>,\n    ) => Promise<ReactNative.SymbolicatedStackTrace>;\n    getDevServer: () => ReactNative.DevServerInfo;\n  };\n  Utilities?: {\n    polyfillGlobal: <T>(name: string, getValue: () => T) => void;\n  };\n  Promise?: typeof Promise;\n  ReactNativeVersion?: {\n    version: typeof RNV;\n  };\n  TurboModuleRegistry?: ReactNative.TurboModuleRegistry;\n}\n"]}