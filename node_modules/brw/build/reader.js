"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BUFFER = "BUFFER",
    RAW = "RAW",
    VIEW = "VIEW";

var Reader = (function () {
  function Reader(buffer) {
    _classCallCheck(this, Reader);

    this[BUFFER] = buffer;
    this[RAW] = new Uint8Array(this[BUFFER]);
    this[VIEW] = new DataView(this[BUFFER]);

    this.index = 0;
  }

  _createClass(Reader, [{
    key: "readBytes",
    value: function readBytes(len) {
      var nb = new Reader(this[BUFFER].slice(this.index, this.index + len));
      this.index += len;
      return nb;
    }
  }, {
    key: "readVarInt",
    value: function readVarInt() {
      var i = this.readUVarInt(),
          s = i >> 1;

      if ((i & 1) !== 0) {
        s = ~s;
      }

      return s;
    }
  }, {
    key: "readUVarInt",
    value: function readUVarInt() {
      var x = 0,
          s = 0;

      for (var i = 0;; i++) {
        var b = this[RAW][this.index++];

        if (b < 0x80) return x | b << s;

        x |= (b & 0x7f) << s;
        s += 7;
      };
    }
  }, {
    key: "readString",
    value: function readString() {
      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var _ref$prefixed = _ref.prefixed;
      var prefixed = _ref$prefixed === undefined ? true : _ref$prefixed;
      var _ref$len = _ref.len;
      var len = _ref$len === undefined ? 0 : _ref$len;

      if (!prefixed && !len) throw new Error("Unprefixed reads should provide a length");

      var view = this[VIEW],
          length = prefixed ? this.readUVarInt() : len,
          offset = this.index;

      var string = "";
      for (var i = offset, end = offset + length; i < end; i++) {
        var byte = view.getUint8(i);

        if ((byte & 0x80) === 0x00) {
          string += String.fromCharCode(byte);
          continue;
        }

        if ((byte & 0xe0) === 0xc0) {
          string += String.fromCharCode((byte & 0x0f) << 6 | view.getUint8(++i) & 0x3f);
          continue;
        }

        if ((byte & 0xf0) === 0xe0) {
          string += String.fromCharCode((byte & 0x0f) << 12 | (view.getUint8(++i) & 0x3f) << 6 | (view.getUint8(++i) & 0x3f) << 0);
          continue;
        }

        if ((byte & 0xf8) === 0xf0) {
          string += String.fromCharCode((byte & 0x07) << 18 | (view.getUint8(++i) & 0x3f) << 12 | (view.getUint8(++i) & 0x3f) << 6 | (view.getUint8(++i) & 0x3f) << 0);
          continue;
        }
        throw new Error("Invalid byte " + byte.toString(16));
      }

      this.index += length;

      return string;
    }
  }, {
    key: "length",
    get: function get() {
      return this[BUFFER].byteLength;
    }
  }]);

  return Reader;
})();

exports["default"] = Reader;
;

[["Int8", 1], ["Uint8", 1], ["Int16", 2], ["Uint16", 2], ["Int32", 4], ["Uint32", 4], ["Float32", 4], ["Float64", 8]].forEach(function (_ref2) {
  var _ref22 = _slicedToArray(_ref2, 2);

  var name = _ref22[0];
  var len = _ref22[1];

  Reader.prototype["read" + name] = function (value) {
    var val = this[VIEW]["get" + name](this.index, false);
    this.index += len;
    return val;
  };
});
module.exports = exports["default"];