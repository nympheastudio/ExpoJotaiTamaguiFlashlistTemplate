{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../src/js/tracing/transaction.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC;;;GAGG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAyB,CAAC,WAA4B,EAAQ,EAAE;IACjG,MAAM,UAAU,GACd,WAAW,CAAC,YAAY;QACxB,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;IAE3F,IAAI,CAAC,UAAU,IAAI,UAAU,IAAI,CAAC,EAAE;QAClC,MAAM,CAAC,GAAG,CAAC,mBAAmB,WAAW,CAAC,EAAE,kCAAkC,CAAC,CAAC;QAChF,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;KAC7B;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,WAA4B,EAAQ,EAAE;IACvE,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;QACtC,MAAM,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;QACpF,OAAO;KACR;IAED,qLAAqL;IACrL,MAAM,YAAY,GAAwC,QAAQ,CAAC,gBAAgB,CACjF,QAAQ,EACR,CAAC,QAAwB,EAAE,EAAE;QAC3B,IAAI,QAAQ,KAAK,YAAY,EAAE;YAC7B,MAAM,CAAC,KAAK,CAAC,WAAW,WAAW,CAAC,EAAE,iEAAiE,CAAC,CAAC;YACzG,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACnC,WAAW,CAAC,MAAM,EAAE,CAAC;SACtB;IACH,CAAC,CACF,CAAC;IACF,YAAY;QACV,WAAW,CAAC,4BAA4B,CAAC,GAAG,EAAE;YAC5C,MAAM,CAAC,KAAK,CAAC,kCAAkC,WAAW,CAAC,EAAE,eAAe,CAAC,CAAC;YAC9E,YAAY,IAAI,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC;QAC/D,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { type BeforeFinishCallback, type IdleTransaction } from '@sentry/core';\nimport { logger } from '@sentry/utils';\nimport type { AppStateStatus, NativeEventSubscription } from 'react-native';\nimport { AppState } from 'react-native';\n\n/**\n * Idle Transaction callback to only sample transactions with child spans.\n * To avoid side effects of other callbacks this should be hooked as the last callback.\n */\nexport const onlySampleIfChildSpans: BeforeFinishCallback = (transaction: IdleTransaction): void => {\n  const spansCount =\n    transaction.spanRecorder &&\n    transaction.spanRecorder.spans.filter(span => span.spanId !== transaction.spanId).length;\n\n  if (!spansCount || spansCount <= 0) {\n    logger.log(`Not sampling as ${transaction.op} transaction has no child spans.`);\n    transaction.sampled = false;\n  }\n};\n\n/**\n * Hooks on AppState change to cancel the transaction if the app goes background.\n */\nexport const cancelInBackground = (transaction: IdleTransaction): void => {\n  if (!AppState || !AppState.isAvailable) {\n    logger.warn('AppState is not available, spans will not be canceled in background.');\n    return;\n  }\n\n  // RN Web can return undefined, https://github.com/necolas/react-native-web/blob/8cf720f0e57c74a254bfa7bed0313e33a4b29c11/packages/react-native-web/src/exports/AppState/index.js#L55\n  const subscription: NativeEventSubscription | undefined = AppState.addEventListener(\n    'change',\n    (newState: AppStateStatus) => {\n      if (newState === 'background') {\n        logger.debug(`Setting ${transaction.op} transaction to cancelled because the app is in the background.`);\n        transaction.setStatus('cancelled');\n        transaction.finish();\n      }\n    },\n  );\n  subscription &&\n    transaction.registerBeforeFinishCallback(() => {\n      logger.debug(`Removing AppState listener for ${transaction.op} transaction.`);\n      subscription && subscription.remove && subscription.remove();\n    });\n};\n"]}