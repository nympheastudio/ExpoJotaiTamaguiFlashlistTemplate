import type { version as RNV } from 'react-native/Libraries/Core/ReactNativeVersion';
import type * as ReactNative from '../vendor/react-native';
export type { UnsafeObject } from 'react-native/Libraries/Types/CodegenTypes';
export type { EmitterSubscription } from 'react-native/Libraries/vendor/emitter/EventEmitter';
export interface ReactNativeLibrariesInterface {
    Devtools?: {
        parseErrorStack: (errorStack: string) => Array<ReactNative.StackFrame>;
        symbolicateStackTrace: (stack: Array<ReactNative.StackFrame>, extraData?: Record<string, unknown>) => Promise<ReactNative.SymbolicatedStackTrace>;
        getDevServer: () => ReactNative.DevServerInfo;
    };
    Utilities?: {
        polyfillGlobal: <T>(name: string, getValue: () => T) => void;
    };
    Promise?: typeof Promise;
    ReactNativeVersion?: {
        version: typeof RNV;
    };
    TurboModuleRegistry?: ReactNative.TurboModuleRegistry;
}
//# sourceMappingURL=rnlibrariesinterface.d.ts.map
