{"version":3,"file":"touchevents.js","sourceRoot":"","sources":["../../src/js/touchevents.tsx"],"names":[],"mappings":"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","sourcesContent":["import { addBreadcrumb, getCurrentHub } from '@sentry/core';\nimport type { SeverityLevel } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport * as React from 'react';\nimport type { GestureResponderEvent} from 'react-native';\nimport { StyleSheet, View } from 'react-native';\n\nimport { createIntegration } from './integrations/factory';\nimport { ReactNativeTracing } from './tracing';\nimport { UI_ACTION_TOUCH } from './tracing/ops';\n\nexport type TouchEventBoundaryProps = {\n  /**\n   * The category assigned to the breadcrumb that is logged by the touch event.\n   */\n  breadcrumbCategory?: string;\n  /**\n   * The type assigned to the breadcrumb that is logged by the touch event.\n   */\n  breadcrumbType?: string;\n  /**\n   * The max number of components to display when logging a touch's component tree.\n   */\n  maxComponentTreeSize?: number;\n  /**\n   * Component name(s) to ignore when logging the touch event. This prevents unhelpful logs such as\n   * \"Touch event within element: View\" where you still can't tell which View it occurred in.\n   */\n  ignoreNames?: Array<string | RegExp>;\n  /**\n   * Deprecated, use ignoreNames instead\n   * @deprecated\n   */\n  ignoredDisplayNames?: Array<string | RegExp>;\n  /**\n   * React Node wrapped by TouchEventBoundary.\n   */\n  children?: React.ReactNode;\n  /**\n   * Label Name used to identify the touched element.\n   */\n  labelName?: string;\n};\n\nconst touchEventStyles = StyleSheet.create({\n  wrapperView: {\n    flex: 1,\n  },\n});\n\nconst DEFAULT_BREADCRUMB_CATEGORY = 'touch';\nconst DEFAULT_BREADCRUMB_TYPE = 'user';\nconst DEFAULT_MAX_COMPONENT_TREE_SIZE = 20;\n\nconst SENTRY_LABEL_PROP_KEY = 'sentry-label';\n\ninterface ElementInstance {\n  elementType?: {\n    displayName?: string;\n    name?: string;\n  };\n  memoizedProps?: Record<string, unknown>;\n  return?: ElementInstance;\n}\n\ninterface PrivateGestureResponderEvent extends GestureResponderEvent {\n  _targetInst?: ElementInstance;\n}\n\n/**\n * Boundary to log breadcrumbs for interaction events.\n */\nclass TouchEventBoundary extends React.Component<TouchEventBoundaryProps> {\n\n  public static displayName: string = '__Sentry.TouchEventBoundary';\n  public static defaultProps: Partial<TouchEventBoundaryProps> = {\n    breadcrumbCategory: DEFAULT_BREADCRUMB_CATEGORY,\n    breadcrumbType: DEFAULT_BREADCRUMB_TYPE,\n    ignoreNames: [],\n    maxComponentTreeSize: DEFAULT_MAX_COMPONENT_TREE_SIZE,\n  };\n\n  public readonly name: string = 'TouchEventBoundary';\n\n  private _tracingIntegration: ReactNativeTracing | null = null;\n\n  /**\n   * Registers the TouchEventBoundary as a Sentry Integration.\n   */\n  public componentDidMount(): void {\n    const client = getCurrentHub().getClient();\n    client?.addIntegration?.(createIntegration(this.name));\n    if (!this._tracingIntegration && client) {\n      this._tracingIntegration = client.getIntegration(ReactNativeTracing);\n    }\n  }\n\n  /**\n   *\n   */\n  public render(): React.ReactNode {\n    return (\n      <View\n        style={touchEventStyles.wrapperView}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onTouchStart={this._onTouchStart.bind(this) as any}\n      >\n        {this.props.children}\n      </View>\n    );\n  }\n\n  /**\n   * Logs the touch event given the component tree names and a label.\n   */\n  private _logTouchEvent(\n    componentTreeNames: string[],\n    activeLabel?: string\n  ): void {\n    const level = 'info' as SeverityLevel;\n    const crumb = {\n      category: this.props.breadcrumbCategory,\n      data: { componentTree: componentTreeNames },\n      level: level,\n      message: activeLabel\n        ? `Touch event within element: ${activeLabel}`\n        : 'Touch event within component tree',\n      type: this.props.breadcrumbType,\n    };\n    addBreadcrumb(crumb);\n\n    logger.log(`[TouchEvents] ${crumb.message}`);\n  }\n\n  /**\n   * Checks if the name is supposed to be ignored.\n   */\n  private _isNameIgnored(name: string): boolean {\n    let ignoreNames = this.props.ignoreNames || [];\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.props.ignoredDisplayNames) {\n      // This is to make it compatible with prior version.\n      // eslint-disable-next-line deprecation/deprecation\n      ignoreNames = [...ignoreNames, ...this.props.ignoredDisplayNames];\n    }\n\n    return ignoreNames.some(\n      (ignoreName: string | RegExp) =>\n        (typeof ignoreName === 'string' && name === ignoreName) ||\n        (ignoreName instanceof RegExp && name.match(ignoreName))\n    );\n  }\n\n  // Originally was going to clean the names of any HOCs as well but decided that it might hinder debugging effectively. Will leave here in case\n  // private readonly _cleanName = (name: string): string =>\n  //   name.replace(/.*\\(/g, \"\").replace(/\\)/g, \"\");\n\n  /**\n   * Traverses through the component tree when a touch happens and logs it.\n   * @param e\n   */\n  // eslint-disable-next-line complexity\n  private _onTouchStart(e: PrivateGestureResponderEvent): void {\n    if (!e._targetInst) {\n      return;\n    }\n\n    let currentInst: ElementInstance | undefined = e._targetInst;\n\n    let activeLabel: string | undefined;\n    let activeDisplayName: string | undefined;\n    const componentTreeNames: string[] = [];\n\n    while (\n      currentInst &&\n      // maxComponentTreeSize will always be defined as we have a defaultProps. But ts needs a check so this is here.\n      this.props.maxComponentTreeSize &&\n      componentTreeNames.length < this.props.maxComponentTreeSize\n    ) {\n      if (\n        // If the loop gets to the boundary itself, break.\n        currentInst.elementType?.displayName ===\n        TouchEventBoundary.displayName\n      ) {\n        break;\n      }\n\n      const props = currentInst.memoizedProps;\n      const sentryLabel =\n        typeof props?.[SENTRY_LABEL_PROP_KEY] !== 'undefined'\n          ? `${props[SENTRY_LABEL_PROP_KEY]}`\n          : undefined;\n\n      // For some reason type narrowing doesn't work as expected with indexing when checking it all in one go in\n      // the \"check-label\" if sentence, so we have to assign it to a variable here first\n      let labelValue;\n      if (typeof this.props.labelName === 'string')\n        labelValue = props?.[this.props.labelName];\n\n      // Check the label first\n      if (sentryLabel && !this._isNameIgnored(sentryLabel)) {\n        if (!activeLabel) {\n          activeLabel = sentryLabel;\n        }\n        componentTreeNames.push(sentryLabel);\n      } else if (\n        typeof labelValue === 'string' &&\n        !this._isNameIgnored(labelValue)\n      ) {\n        if (!activeLabel) {\n          activeLabel = labelValue;\n        }\n        componentTreeNames.push(labelValue);\n      } else if (currentInst.elementType) {\n        const { elementType } = currentInst;\n\n        if (\n          elementType.displayName &&\n          !this._isNameIgnored(elementType.displayName)\n        ) {\n          // Check display name\n          if (!activeDisplayName) {\n            activeDisplayName = elementType.displayName;\n          }\n          componentTreeNames.push(elementType.displayName);\n        }\n      }\n\n      currentInst = currentInst.return;\n    }\n\n    const finalLabel = activeLabel ?? activeDisplayName;\n\n    if (componentTreeNames.length > 0 || finalLabel) {\n      this._logTouchEvent(componentTreeNames, finalLabel);\n    }\n\n    this._tracingIntegration?.startUserInteractionTransaction({\n      elementId: activeLabel,\n      op: UI_ACTION_TOUCH,\n    });\n  }\n}\n\n/**\n * Convenience Higher-Order-Component for TouchEventBoundary\n * @param WrappedComponent any React Component\n * @param boundaryProps TouchEventBoundaryProps\n */\nconst withTouchEventBoundary = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  InnerComponent: React.ComponentType<any>,\n  boundaryProps?: TouchEventBoundaryProps\n): React.FunctionComponent => {\n  const WrappedComponent: React.FunctionComponent = (props) => (\n    <TouchEventBoundary {...(boundaryProps ?? {})}>\n      <InnerComponent {...props} />\n    </TouchEventBoundary>\n  );\n\n  WrappedComponent.displayName = 'WithTouchEventBoundary';\n\n  return WrappedComponent;\n};\n\nexport { TouchEventBoundary, withTouchEventBoundary };\n"]}