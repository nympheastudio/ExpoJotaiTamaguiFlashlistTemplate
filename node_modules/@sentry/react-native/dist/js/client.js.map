{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/js/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { eventFromException, eventFromMessage } from '@sentry/browser';\nimport { BaseClient } from '@sentry/core';\nimport type {\n  ClientReportEnvelope,\n  ClientReportItem,\n  Envelope,\n  Event,\n  EventHint,\n  Exception,\n  Outcome,\n  SeverityLevel,\n  Thread,\n  UserFeedback,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, logger, SentryError } from '@sentry/utils';\nimport { Alert } from 'react-native';\n\nimport { createIntegration } from './integrations/factory';\nimport { defaultSdkInfo } from './integrations/sdkinfo';\nimport type { ReactNativeClientOptions } from './options';\nimport { ReactNativeTracing } from './tracing';\nimport { createUserFeedbackEnvelope, items } from './utils/envelope';\nimport { ignoreRequireCycleLogs } from './utils/ignorerequirecyclelogs';\nimport { mergeOutcomes } from './utils/outcome';\nimport { NATIVE } from './wrapper';\n\n/**\n * The Sentry React Native SDK Client.\n *\n * @see ReactNativeClientOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class ReactNativeClient extends BaseClient<ReactNativeClientOptions> {\n  private _outcomesBuffer: Outcome[];\n\n  /**\n   * Creates a new React Native SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: ReactNativeClientOptions) {\n    ignoreRequireCycleLogs();\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || defaultSdkInfo;\n    super(options);\n\n    this._outcomesBuffer = [];\n    this._initNativeSdk();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint: EventHint = {}): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level?: SeverityLevel, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace).then(\n      (event: Event) => {\n        // TMP! Remove this function once JS SDK uses threads for messages\n        if (!event.exception?.values || event.exception.values.length <= 0) {\n          return event;\n        }\n        const values = event.exception.values.map(\n          (exception: Exception): Thread => ({\n            stacktrace: exception.stacktrace,\n          }),\n        );\n        (event as { threads?: { values: Thread[] } }).threads = { values };\n        delete event.exception;\n        return event;\n      },\n    );\n  }\n\n  /**\n   * If native client is available it will trigger a native crash.\n   * Use this only for testing purposes.\n   */\n  public nativeCrash(): void {\n    NATIVE.nativeCrash();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(): PromiseLike<boolean> {\n    // As super.close() flushes queued events, we wait for that to finish before closing the native SDK.\n    return super.close().then((result: boolean) => {\n      return NATIVE.closeNativeSdk().then(() => result) as PromiseLike<boolean>;\n    });\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  public captureUserFeedback(feedback: UserFeedback): void {\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this._options._metadata,\n      dsn: this.getDsn(),\n      tunnel: undefined,\n    });\n    this._sendEnvelope(envelope);\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    super.setupIntegrations();\n    const tracing = this.getIntegration(ReactNativeTracing);\n    const routingName = tracing?.options.routingInstrumentation?.name;\n    if (routingName) {\n      this.addIntegration(createIntegration(routingName));\n    }\n    const enableUserInteractionTracing = tracing?.options.enableUserInteractionTracing;\n    if (enableUserInteractionTracing) {\n      this.addIntegration(createIntegration('ReactNativeUserInteractionTracing'));\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected _sendEnvelope(envelope: Envelope): void {\n    const outcomes = this._clearOutcomes();\n    this._outcomesBuffer = mergeOutcomes(this._outcomesBuffer, outcomes);\n\n    if (this._options.sendClientReports) {\n      this._attachClientReportTo(this._outcomesBuffer, envelope as ClientReportEnvelope);\n    }\n\n    let shouldClearOutcomesBuffer = true;\n    if (this._isEnabled() && this._transport && this._dsn) {\n      this.emit('beforeEnvelope', envelope);\n\n      this._transport.send(envelope).then(null, reason => {\n        if (reason instanceof SentryError) {\n          // SentryError is thrown by SyncPromise\n          shouldClearOutcomesBuffer = false;\n          // If this is called asynchronously we want the _outcomesBuffer to be cleared\n          logger.error('SentryError while sending event, keeping outcomes buffer:', reason);\n        } else {\n          logger.error('Error while sending event:', reason);\n        }\n      });\n    } else {\n      logger.error('Transport disabled');\n    }\n\n    if (shouldClearOutcomesBuffer) {\n      this._outcomesBuffer = []; // if send fails synchronously the _outcomesBuffer will stay intact\n    }\n  }\n\n  /**\n   * Starts native client with dsn and options\n   */\n  private _initNativeSdk(): void {\n    NATIVE.initNativeSdk(this._options)\n      .then(\n        (result: boolean) => {\n          return result;\n        },\n        () => {\n          this._showCannotConnectDialog();\n          return false;\n        },\n      )\n      .then((didCallNativeInit: boolean) => {\n        this._options.onReady?.({ didCallNativeInit });\n      })\n      .then(undefined, error => {\n        logger.error('The OnReady callback threw an error: ', error);\n      });\n  }\n\n  /**\n   * If the user is in development mode, and the native nagger is enabled then it will show an alert.\n   */\n  private _showCannotConnectDialog(): void {\n    if (__DEV__ && this._options.enableNativeNagger) {\n      Alert.alert(\n        'Sentry',\n        'Warning, could not connect to Sentry native SDK.\\nIf you do not want to use the native component please pass `enableNative: false` in the options.\\nVisit: https://docs.sentry.io/platforms/react-native/ for more details.',\n      );\n    }\n  }\n\n  /**\n   * Attaches a client report from outcomes to the envelope.\n   */\n  private _attachClientReportTo(outcomes: Outcome[], envelope: ClientReportEnvelope): void {\n    if (outcomes.length > 0) {\n      const clientReportItem: ClientReportItem = [\n        { type: 'client_report' },\n        {\n          timestamp: dateTimestampInSeconds(),\n          discarded_events: outcomes,\n        },\n      ];\n\n      envelope[items].push(clientReportItem);\n    }\n  }\n}\n"]}