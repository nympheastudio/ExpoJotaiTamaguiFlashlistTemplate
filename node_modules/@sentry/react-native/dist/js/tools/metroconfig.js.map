{"version":3,"file":"metroconfig.js","sourceRoot":"","sources":["../../../src/js/tools/metroconfig.ts"],"names":[],"mappings":";;;AACA,qCAA8B;AAE9B,mEAA+G;AAG/G,kEAAwC;AAExC;;;;;GAKG;AACH,SAAgB,gBAAgB,CAAC,MAAmB;IAClD,8BAA8B,EAAE,CAAC;IAEjC,IAAI,SAAS,GAAG,MAAM,CAAC;IAEvB,SAAS,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACzC,SAAS,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IAEjD,OAAO,SAAS,CAAC;AACnB,CAAC;AATD,4CASC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CACjC,WAAmB,EACnB,UAAoF,EAAE;IAEtF,8BAA8B,EAAE,CAAC;IAEjC,MAAM,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,IAAI,yBAAyB,EAAE,CAAC,gBAAgB,CAAC;IAClG,MAAM,MAAM,GAAG,gBAAgB,CAAC,WAAW,kCACtC,OAAO,KACV,wCAAwC,EAAE;YACxC,GAAG,CAAC,OAAO,CAAC,wCAAwC,IAAI,EAAE,CAAC;YAC3D,+DAAuC;SACxC,IACD,CAAC;IAEH,OAAO,yBAAyB,CAAC,MAAM,CAAC,CAAC;AAC3C,CAAC;AAhBD,kDAgBC;AAED,SAAS,yBAAyB;IAYhC,IAAI;QACF,8DAA8D;QAC9D,OAAO,OAAO,CAAC,mBAAmB,CAAC,CAAC;KACrC;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;KAC3F;AACH,CAAC;AAID,SAAS,iBAAiB,CAAC,MAAmB;;IAC5C,MAAM,gBAAgB,GAAG,IAAA,mDAA2B,EAClD,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,gBAAgB,KAAI,SAAS,CACxB,CAAC;IAC3B,yFAAyF;IACzF,iCAAiC;IAEjC,uCACK,MAAM,KACT,UAAU,kCACL,MAAM,CAAC,UAAU,KACpB,gBAAgB,OAElB;AACJ,CAAC;AAQD;;GAEG;AACH,SAAgB,yBAAyB,CAAC,MAAmB;;IAC3D,MAAM,sBAAsB,GAAG,MAAA,MAAM,CAAC,YAAY,0CAAE,cAAc,CAAC;IACnE,MAAM,4BAA4B,GAAG,CAAC,KAAiB,EAAW,EAAE,CAClE,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ;QAC9B,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,8CAA8C,CAAC;YAClE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,0CAA0C,CAAC,CAAC,CAAC;IAErE,MAAM,cAAc,GAAG,CAAC,KAAiB,EAAkC,EAAE;QAC3E,MAAM,8BAA8B,GAAG,CACrC,qBAAsD,EACjC,EAAE,CAAC,iCACrB,qBAAqB,KACxB,QAAQ,EAAE,CAAC,qBAAqB,IAAI,qBAAqB,CAAC,QAAQ,CAAC,IAAI,4BAA4B,CAAC,KAAK,CAAC,IAC1G,CAAC;QAEH,MAAM,yBAAyB,GAAG,CAAC,sBAAsB,IAAI,sBAAsB,CAAC,KAAK,CAAC,CAAC,IAAI,SAAS,CAAC;QAEzG,IAAI,yBAAyB,KAAK,SAAS,IAAI,MAAM,IAAI,yBAAyB,EAAE;YAClF,OAAO,yBAAyB,CAAC,IAAI,CAAsB,qBAAqB,CAAC,EAAE,CACjF,8BAA8B,CAAC,qBAAqB,CAAC,CACtD,CAAC;SACH;QAED,OAAO,8BAA8B,CAAC,yBAAyB,CAAC,CAAC;IACnE,CAAC,CAAC;IAEF,uCACK,MAAM,KACT,YAAY,kCACP,MAAM,CAAC,YAAY,KACtB,cAAc,OAEhB;AACJ,CAAC;AAjCD,8DAiCC;AAED;;;;GAIG;AACH,SAAS,8BAA8B;IACrC,aAAG,CAAC,6BAA6B,GAAG,MAAM,CAAC;AAC7C,CAAC","sourcesContent":["import type { MetroConfig, MixedOutput, Module, ReadOnlyGraph } from 'metro';\nimport { env } from 'process';\n\nimport { createSentryMetroSerializer, unstable_beforeAssetSerializationPlugin } from './sentryMetroSerializer';\nimport type { DefaultConfigOptions } from './vendor/expo/expoconfig';\n\nexport * from './sentryMetroSerializer';\n\n/**\n * Adds Sentry to the Metro config.\n *\n * Adds Debug ID to the output bundle and source maps.\n * Collapses Sentry frames from the stack trace view in LogBox.\n */\nexport function withSentryConfig(config: MetroConfig): MetroConfig {\n  setSentryMetroDevServerEnvFlag();\n\n  let newConfig = config;\n\n  newConfig = withSentryDebugId(newConfig);\n  newConfig = withSentryFramesCollapsed(newConfig);\n\n  return newConfig;\n}\n\n/**\n * This function returns Default Expo configuration with Sentry plugins.\n */\nexport function getSentryExpoConfig(\n  projectRoot: string,\n  options: DefaultConfigOptions & { getDefaultConfig?: typeof getSentryExpoConfig } = {},\n): MetroConfig {\n  setSentryMetroDevServerEnvFlag();\n\n  const getDefaultConfig = options.getDefaultConfig || loadExpoMetroConfigModule().getDefaultConfig;\n  const config = getDefaultConfig(projectRoot, {\n    ...options,\n    unstable_beforeAssetSerializationPlugins: [\n      ...(options.unstable_beforeAssetSerializationPlugins || []),\n      unstable_beforeAssetSerializationPlugin,\n    ],\n  });\n\n  return withSentryFramesCollapsed(config);\n}\n\nfunction loadExpoMetroConfigModule(): {\n  getDefaultConfig: (\n    projectRoot: string,\n    options: {\n      unstable_beforeAssetSerializationPlugins?: ((serializationInput: {\n        graph: ReadOnlyGraph<MixedOutput>;\n        premodules: Module[];\n        debugId?: string;\n      }) => Module[])[];\n    },\n  ) => MetroConfig;\n} {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return require('expo/metro-config');\n  } catch (e) {\n    throw new Error('Unable to load `expo/metro-config`. Make sure you have Expo installed.');\n  }\n}\n\ntype MetroCustomSerializer = Required<Required<MetroConfig>['serializer']>['customSerializer'] | undefined;\n\nfunction withSentryDebugId(config: MetroConfig): MetroConfig {\n  const customSerializer = createSentryMetroSerializer(\n    config.serializer?.customSerializer || undefined,\n  ) as MetroCustomSerializer;\n  // MetroConfig types customSerializers as async only, but sync returns are also supported\n  // The default serializer is sync\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      customSerializer,\n    },\n  };\n}\n\ntype MetroFrame = Parameters<Required<Required<MetroConfig>['symbolicator']>['customizeFrame']>[0];\ntype MetroCustomizeFrame = { readonly collapse?: boolean };\ntype MetroCustomizeFrameReturnValue =\n  | ReturnType<Required<Required<MetroConfig>['symbolicator']>['customizeFrame']>\n  | undefined;\n\n/**\n * Collapses Sentry internal frames from the stack trace view in LogBox.\n */\nexport function withSentryFramesCollapsed(config: MetroConfig): MetroConfig {\n  const originalCustomizeFrame = config.symbolicator?.customizeFrame;\n  const collapseSentryInternalFrames = (frame: MetroFrame): boolean =>\n    typeof frame.file === 'string' &&\n    (frame.file.includes('node_modules/@sentry/utils/cjs/instrument.js') ||\n      frame.file.includes('node_modules/@sentry/utils/cjs/logger.js'));\n\n  const customizeFrame = (frame: MetroFrame): MetroCustomizeFrameReturnValue => {\n    const originalOrSentryCustomizeFrame = (\n      originalCustomization: MetroCustomizeFrame | undefined,\n    ): MetroCustomizeFrame => ({\n      ...originalCustomization,\n      collapse: (originalCustomization && originalCustomization.collapse) || collapseSentryInternalFrames(frame),\n    });\n\n    const maybePromiseCustomization = (originalCustomizeFrame && originalCustomizeFrame(frame)) || undefined;\n\n    if (maybePromiseCustomization !== undefined && 'then' in maybePromiseCustomization) {\n      return maybePromiseCustomization.then<MetroCustomizeFrame>(originalCustomization =>\n        originalOrSentryCustomizeFrame(originalCustomization),\n      );\n    }\n\n    return originalOrSentryCustomizeFrame(maybePromiseCustomization);\n  };\n\n  return {\n    ...config,\n    symbolicator: {\n      ...config.symbolicator,\n      customizeFrame,\n    },\n  };\n}\n\n/**\n * Sets the `___SENTRY_METRO_DEV_SERVER___` environment flag.\n * This is used to determine if the SDK is running in Node in Metro Dev Server.\n * For example during static routes generation in `expo-router`.\n */\nfunction setSentryMetroDevServerEnvFlag(): void {\n  env.___SENTRY_METRO_DEV_SERVER___ = 'true';\n}\n"]}